
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model medical_history
 * 
 */
export type medical_history = $Result.DefaultSelection<Prisma.$medical_historyPayload>
/**
 * Model disease
 * 
 */
export type disease = $Result.DefaultSelection<Prisma.$diseasePayload>
/**
 * Model measurement
 * 
 */
export type measurement = $Result.DefaultSelection<Prisma.$measurementPayload>
/**
 * Model prescribed_medication
 * 
 */
export type prescribed_medication = $Result.DefaultSelection<Prisma.$prescribed_medicationPayload>
/**
 * Model medication
 * 
 */
export type medication = $Result.DefaultSelection<Prisma.$medicationPayload>
/**
 * Model patient
 * 
 */
export type patient = $Result.DefaultSelection<Prisma.$patientPayload>
/**
 * Model doctor
 * 
 */
export type doctor = $Result.DefaultSelection<Prisma.$doctorPayload>
/**
 * Model department
 * 
 */
export type department = $Result.DefaultSelection<Prisma.$departmentPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const mesaurement_types: {
  weight: 'weight',
  blood_pressure_systolic: 'blood_pressure_systolic',
  blood_pressure_diastolic: 'blood_pressure_diastolic'
};

export type mesaurement_types = (typeof mesaurement_types)[keyof typeof mesaurement_types]


export const status: {
  active: 'active',
  completed: 'completed',
  not_Completed: 'not_Completed',
  pending: 'pending'
};

export type status = (typeof status)[keyof typeof status]


export const gender: {
  M: 'M',
  F: 'F'
};

export type gender = (typeof gender)[keyof typeof gender]

}

export type mesaurement_types = $Enums.mesaurement_types

export const mesaurement_types: typeof $Enums.mesaurement_types

export type status = $Enums.status

export const status: typeof $Enums.status

export type gender = $Enums.gender

export const gender: typeof $Enums.gender

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Medical_histories
 * const medical_histories = await prisma.medical_history.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Medical_histories
   * const medical_histories = await prisma.medical_history.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.medical_history`: Exposes CRUD operations for the **medical_history** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Medical_histories
    * const medical_histories = await prisma.medical_history.findMany()
    * ```
    */
  get medical_history(): Prisma.medical_historyDelegate<ExtArgs>;

  /**
   * `prisma.disease`: Exposes CRUD operations for the **disease** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Diseases
    * const diseases = await prisma.disease.findMany()
    * ```
    */
  get disease(): Prisma.diseaseDelegate<ExtArgs>;

  /**
   * `prisma.measurement`: Exposes CRUD operations for the **measurement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Measurements
    * const measurements = await prisma.measurement.findMany()
    * ```
    */
  get measurement(): Prisma.measurementDelegate<ExtArgs>;

  /**
   * `prisma.prescribed_medication`: Exposes CRUD operations for the **prescribed_medication** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Prescribed_medications
    * const prescribed_medications = await prisma.prescribed_medication.findMany()
    * ```
    */
  get prescribed_medication(): Prisma.prescribed_medicationDelegate<ExtArgs>;

  /**
   * `prisma.medication`: Exposes CRUD operations for the **medication** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Medications
    * const medications = await prisma.medication.findMany()
    * ```
    */
  get medication(): Prisma.medicationDelegate<ExtArgs>;

  /**
   * `prisma.patient`: Exposes CRUD operations for the **patient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patient.findMany()
    * ```
    */
  get patient(): Prisma.patientDelegate<ExtArgs>;

  /**
   * `prisma.doctor`: Exposes CRUD operations for the **doctor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doctors
    * const doctors = await prisma.doctor.findMany()
    * ```
    */
  get doctor(): Prisma.doctorDelegate<ExtArgs>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.departmentDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.15.0
   * Query Engine version: 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    medical_history: 'medical_history',
    disease: 'disease',
    measurement: 'measurement',
    prescribed_medication: 'prescribed_medication',
    medication: 'medication',
    patient: 'patient',
    doctor: 'doctor',
    department: 'department'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'medical_history' | 'disease' | 'measurement' | 'prescribed_medication' | 'medication' | 'patient' | 'doctor' | 'department'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      medical_history: {
        payload: Prisma.$medical_historyPayload<ExtArgs>
        fields: Prisma.medical_historyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.medical_historyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$medical_historyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.medical_historyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$medical_historyPayload>
          }
          findFirst: {
            args: Prisma.medical_historyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$medical_historyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.medical_historyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$medical_historyPayload>
          }
          findMany: {
            args: Prisma.medical_historyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$medical_historyPayload>[]
          }
          create: {
            args: Prisma.medical_historyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$medical_historyPayload>
          }
          createMany: {
            args: Prisma.medical_historyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.medical_historyCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$medical_historyPayload>[]
          }
          delete: {
            args: Prisma.medical_historyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$medical_historyPayload>
          }
          update: {
            args: Prisma.medical_historyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$medical_historyPayload>
          }
          deleteMany: {
            args: Prisma.medical_historyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.medical_historyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.medical_historyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$medical_historyPayload>
          }
          aggregate: {
            args: Prisma.Medical_historyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMedical_history>
          }
          groupBy: {
            args: Prisma.medical_historyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Medical_historyGroupByOutputType>[]
          }
          count: {
            args: Prisma.medical_historyCountArgs<ExtArgs>,
            result: $Utils.Optional<Medical_historyCountAggregateOutputType> | number
          }
        }
      }
      disease: {
        payload: Prisma.$diseasePayload<ExtArgs>
        fields: Prisma.diseaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.diseaseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$diseasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.diseaseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$diseasePayload>
          }
          findFirst: {
            args: Prisma.diseaseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$diseasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.diseaseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$diseasePayload>
          }
          findMany: {
            args: Prisma.diseaseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$diseasePayload>[]
          }
          create: {
            args: Prisma.diseaseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$diseasePayload>
          }
          createMany: {
            args: Prisma.diseaseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.diseaseCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$diseasePayload>[]
          }
          delete: {
            args: Prisma.diseaseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$diseasePayload>
          }
          update: {
            args: Prisma.diseaseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$diseasePayload>
          }
          deleteMany: {
            args: Prisma.diseaseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.diseaseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.diseaseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$diseasePayload>
          }
          aggregate: {
            args: Prisma.DiseaseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDisease>
          }
          groupBy: {
            args: Prisma.diseaseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DiseaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.diseaseCountArgs<ExtArgs>,
            result: $Utils.Optional<DiseaseCountAggregateOutputType> | number
          }
        }
      }
      measurement: {
        payload: Prisma.$measurementPayload<ExtArgs>
        fields: Prisma.measurementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.measurementFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$measurementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.measurementFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$measurementPayload>
          }
          findFirst: {
            args: Prisma.measurementFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$measurementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.measurementFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$measurementPayload>
          }
          findMany: {
            args: Prisma.measurementFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$measurementPayload>[]
          }
          create: {
            args: Prisma.measurementCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$measurementPayload>
          }
          createMany: {
            args: Prisma.measurementCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.measurementCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$measurementPayload>[]
          }
          delete: {
            args: Prisma.measurementDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$measurementPayload>
          }
          update: {
            args: Prisma.measurementUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$measurementPayload>
          }
          deleteMany: {
            args: Prisma.measurementDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.measurementUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.measurementUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$measurementPayload>
          }
          aggregate: {
            args: Prisma.MeasurementAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMeasurement>
          }
          groupBy: {
            args: Prisma.measurementGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MeasurementGroupByOutputType>[]
          }
          count: {
            args: Prisma.measurementCountArgs<ExtArgs>,
            result: $Utils.Optional<MeasurementCountAggregateOutputType> | number
          }
        }
      }
      prescribed_medication: {
        payload: Prisma.$prescribed_medicationPayload<ExtArgs>
        fields: Prisma.prescribed_medicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.prescribed_medicationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$prescribed_medicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.prescribed_medicationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$prescribed_medicationPayload>
          }
          findFirst: {
            args: Prisma.prescribed_medicationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$prescribed_medicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.prescribed_medicationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$prescribed_medicationPayload>
          }
          findMany: {
            args: Prisma.prescribed_medicationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$prescribed_medicationPayload>[]
          }
          create: {
            args: Prisma.prescribed_medicationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$prescribed_medicationPayload>
          }
          createMany: {
            args: Prisma.prescribed_medicationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.prescribed_medicationCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$prescribed_medicationPayload>[]
          }
          delete: {
            args: Prisma.prescribed_medicationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$prescribed_medicationPayload>
          }
          update: {
            args: Prisma.prescribed_medicationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$prescribed_medicationPayload>
          }
          deleteMany: {
            args: Prisma.prescribed_medicationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.prescribed_medicationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.prescribed_medicationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$prescribed_medicationPayload>
          }
          aggregate: {
            args: Prisma.Prescribed_medicationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePrescribed_medication>
          }
          groupBy: {
            args: Prisma.prescribed_medicationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Prescribed_medicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.prescribed_medicationCountArgs<ExtArgs>,
            result: $Utils.Optional<Prescribed_medicationCountAggregateOutputType> | number
          }
        }
      }
      medication: {
        payload: Prisma.$medicationPayload<ExtArgs>
        fields: Prisma.medicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.medicationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$medicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.medicationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$medicationPayload>
          }
          findFirst: {
            args: Prisma.medicationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$medicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.medicationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$medicationPayload>
          }
          findMany: {
            args: Prisma.medicationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$medicationPayload>[]
          }
          create: {
            args: Prisma.medicationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$medicationPayload>
          }
          createMany: {
            args: Prisma.medicationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.medicationCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$medicationPayload>[]
          }
          delete: {
            args: Prisma.medicationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$medicationPayload>
          }
          update: {
            args: Prisma.medicationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$medicationPayload>
          }
          deleteMany: {
            args: Prisma.medicationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.medicationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.medicationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$medicationPayload>
          }
          aggregate: {
            args: Prisma.MedicationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMedication>
          }
          groupBy: {
            args: Prisma.medicationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MedicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.medicationCountArgs<ExtArgs>,
            result: $Utils.Optional<MedicationCountAggregateOutputType> | number
          }
        }
      }
      patient: {
        payload: Prisma.$patientPayload<ExtArgs>
        fields: Prisma.patientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.patientFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$patientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.patientFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$patientPayload>
          }
          findFirst: {
            args: Prisma.patientFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$patientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.patientFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$patientPayload>
          }
          findMany: {
            args: Prisma.patientFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$patientPayload>[]
          }
          create: {
            args: Prisma.patientCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$patientPayload>
          }
          createMany: {
            args: Prisma.patientCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.patientCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$patientPayload>[]
          }
          delete: {
            args: Prisma.patientDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$patientPayload>
          }
          update: {
            args: Prisma.patientUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$patientPayload>
          }
          deleteMany: {
            args: Prisma.patientDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.patientUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.patientUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$patientPayload>
          }
          aggregate: {
            args: Prisma.PatientAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePatient>
          }
          groupBy: {
            args: Prisma.patientGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PatientGroupByOutputType>[]
          }
          count: {
            args: Prisma.patientCountArgs<ExtArgs>,
            result: $Utils.Optional<PatientCountAggregateOutputType> | number
          }
        }
      }
      doctor: {
        payload: Prisma.$doctorPayload<ExtArgs>
        fields: Prisma.doctorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.doctorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doctorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.doctorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doctorPayload>
          }
          findFirst: {
            args: Prisma.doctorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doctorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.doctorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doctorPayload>
          }
          findMany: {
            args: Prisma.doctorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doctorPayload>[]
          }
          create: {
            args: Prisma.doctorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doctorPayload>
          }
          createMany: {
            args: Prisma.doctorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.doctorCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doctorPayload>[]
          }
          delete: {
            args: Prisma.doctorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doctorPayload>
          }
          update: {
            args: Prisma.doctorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doctorPayload>
          }
          deleteMany: {
            args: Prisma.doctorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.doctorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.doctorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$doctorPayload>
          }
          aggregate: {
            args: Prisma.DoctorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDoctor>
          }
          groupBy: {
            args: Prisma.doctorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DoctorGroupByOutputType>[]
          }
          count: {
            args: Prisma.doctorCountArgs<ExtArgs>,
            result: $Utils.Optional<DoctorCountAggregateOutputType> | number
          }
        }
      }
      department: {
        payload: Prisma.$departmentPayload<ExtArgs>
        fields: Prisma.departmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.departmentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$departmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.departmentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$departmentPayload>
          }
          findFirst: {
            args: Prisma.departmentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$departmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.departmentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$departmentPayload>
          }
          findMany: {
            args: Prisma.departmentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$departmentPayload>[]
          }
          create: {
            args: Prisma.departmentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$departmentPayload>
          }
          createMany: {
            args: Prisma.departmentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.departmentCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$departmentPayload>[]
          }
          delete: {
            args: Prisma.departmentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$departmentPayload>
          }
          update: {
            args: Prisma.departmentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$departmentPayload>
          }
          deleteMany: {
            args: Prisma.departmentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.departmentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.departmentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$departmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.departmentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.departmentCountArgs<ExtArgs>,
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type Medical_historyCountOutputType
   */

  export type Medical_historyCountOutputType = {
    disease: number
  }

  export type Medical_historyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    disease?: boolean | Medical_historyCountOutputTypeCountDiseaseArgs
  }

  // Custom InputTypes
  /**
   * Medical_historyCountOutputType without action
   */
  export type Medical_historyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medical_historyCountOutputType
     */
    select?: Medical_historyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Medical_historyCountOutputType without action
   */
  export type Medical_historyCountOutputTypeCountDiseaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: diseaseWhereInput
  }


  /**
   * Count Type MedicationCountOutputType
   */

  export type MedicationCountOutputType = {
    prescribed: number
  }

  export type MedicationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    prescribed?: boolean | MedicationCountOutputTypeCountPrescribedArgs
  }

  // Custom InputTypes
  /**
   * MedicationCountOutputType without action
   */
  export type MedicationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationCountOutputType
     */
    select?: MedicationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MedicationCountOutputType without action
   */
  export type MedicationCountOutputTypeCountPrescribedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: prescribed_medicationWhereInput
  }


  /**
   * Count Type PatientCountOutputType
   */

  export type PatientCountOutputType = {
    doctors: number
    medications: number
  }

  export type PatientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctors?: boolean | PatientCountOutputTypeCountDoctorsArgs
    medications?: boolean | PatientCountOutputTypeCountMedicationsArgs
  }

  // Custom InputTypes
  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCountOutputType
     */
    select?: PatientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountDoctorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: doctorWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountMedicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: prescribed_medicationWhereInput
  }


  /**
   * Count Type DoctorCountOutputType
   */

  export type DoctorCountOutputType = {
    patients: number
    prescribed_medications: number
  }

  export type DoctorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patients?: boolean | DoctorCountOutputTypeCountPatientsArgs
    prescribed_medications?: boolean | DoctorCountOutputTypeCountPrescribed_medicationsArgs
  }

  // Custom InputTypes
  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorCountOutputType
     */
    select?: DoctorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountPatientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: patientWhereInput
  }

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountPrescribed_medicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: prescribed_medicationWhereInput
  }


  /**
   * Count Type DepartmentCountOutputType
   */

  export type DepartmentCountOutputType = {
    doctors: number
  }

  export type DepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctors?: boolean | DepartmentCountOutputTypeCountDoctorsArgs
  }

  // Custom InputTypes
  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountDoctorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: doctorWhereInput
  }


  /**
   * Models
   */

  /**
   * Model medical_history
   */

  export type AggregateMedical_history = {
    _count: Medical_historyCountAggregateOutputType | null
    _min: Medical_historyMinAggregateOutputType | null
    _max: Medical_historyMaxAggregateOutputType | null
  }

  export type Medical_historyMinAggregateOutputType = {
    history_id: string | null
    history_name: string | null
    description: string | null
    patientId: string | null
  }

  export type Medical_historyMaxAggregateOutputType = {
    history_id: string | null
    history_name: string | null
    description: string | null
    patientId: string | null
  }

  export type Medical_historyCountAggregateOutputType = {
    history_id: number
    history_name: number
    description: number
    patientId: number
    _all: number
  }


  export type Medical_historyMinAggregateInputType = {
    history_id?: true
    history_name?: true
    description?: true
    patientId?: true
  }

  export type Medical_historyMaxAggregateInputType = {
    history_id?: true
    history_name?: true
    description?: true
    patientId?: true
  }

  export type Medical_historyCountAggregateInputType = {
    history_id?: true
    history_name?: true
    description?: true
    patientId?: true
    _all?: true
  }

  export type Medical_historyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which medical_history to aggregate.
     */
    where?: medical_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of medical_histories to fetch.
     */
    orderBy?: medical_historyOrderByWithRelationInput | medical_historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: medical_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` medical_histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` medical_histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned medical_histories
    **/
    _count?: true | Medical_historyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Medical_historyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Medical_historyMaxAggregateInputType
  }

  export type GetMedical_historyAggregateType<T extends Medical_historyAggregateArgs> = {
        [P in keyof T & keyof AggregateMedical_history]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedical_history[P]>
      : GetScalarType<T[P], AggregateMedical_history[P]>
  }




  export type medical_historyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: medical_historyWhereInput
    orderBy?: medical_historyOrderByWithAggregationInput | medical_historyOrderByWithAggregationInput[]
    by: Medical_historyScalarFieldEnum[] | Medical_historyScalarFieldEnum
    having?: medical_historyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Medical_historyCountAggregateInputType | true
    _min?: Medical_historyMinAggregateInputType
    _max?: Medical_historyMaxAggregateInputType
  }

  export type Medical_historyGroupByOutputType = {
    history_id: string
    history_name: string
    description: string
    patientId: string
    _count: Medical_historyCountAggregateOutputType | null
    _min: Medical_historyMinAggregateOutputType | null
    _max: Medical_historyMaxAggregateOutputType | null
  }

  type GetMedical_historyGroupByPayload<T extends medical_historyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Medical_historyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Medical_historyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Medical_historyGroupByOutputType[P]>
            : GetScalarType<T[P], Medical_historyGroupByOutputType[P]>
        }
      >
    >


  export type medical_historySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    history_id?: boolean
    history_name?: boolean
    description?: boolean
    patientId?: boolean
    disease?: boolean | medical_history$diseaseArgs<ExtArgs>
    patient?: boolean | patientDefaultArgs<ExtArgs>
    _count?: boolean | Medical_historyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medical_history"]>

  export type medical_historySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    history_id?: boolean
    history_name?: boolean
    description?: boolean
    patientId?: boolean
    patient?: boolean | patientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medical_history"]>

  export type medical_historySelectScalar = {
    history_id?: boolean
    history_name?: boolean
    description?: boolean
    patientId?: boolean
  }

  export type medical_historyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    disease?: boolean | medical_history$diseaseArgs<ExtArgs>
    patient?: boolean | patientDefaultArgs<ExtArgs>
    _count?: boolean | Medical_historyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type medical_historyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | patientDefaultArgs<ExtArgs>
  }

  export type $medical_historyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "medical_history"
    objects: {
      disease: Prisma.$diseasePayload<ExtArgs>[]
      patient: Prisma.$patientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      history_id: string
      history_name: string
      description: string
      patientId: string
    }, ExtArgs["result"]["medical_history"]>
    composites: {}
  }

  type medical_historyGetPayload<S extends boolean | null | undefined | medical_historyDefaultArgs> = $Result.GetResult<Prisma.$medical_historyPayload, S>

  type medical_historyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<medical_historyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Medical_historyCountAggregateInputType | true
    }

  export interface medical_historyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['medical_history'], meta: { name: 'medical_history' } }
    /**
     * Find zero or one Medical_history that matches the filter.
     * @param {medical_historyFindUniqueArgs} args - Arguments to find a Medical_history
     * @example
     * // Get one Medical_history
     * const medical_history = await prisma.medical_history.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends medical_historyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, medical_historyFindUniqueArgs<ExtArgs>>
    ): Prisma__medical_historyClient<$Result.GetResult<Prisma.$medical_historyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Medical_history that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {medical_historyFindUniqueOrThrowArgs} args - Arguments to find a Medical_history
     * @example
     * // Get one Medical_history
     * const medical_history = await prisma.medical_history.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends medical_historyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, medical_historyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__medical_historyClient<$Result.GetResult<Prisma.$medical_historyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Medical_history that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {medical_historyFindFirstArgs} args - Arguments to find a Medical_history
     * @example
     * // Get one Medical_history
     * const medical_history = await prisma.medical_history.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends medical_historyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, medical_historyFindFirstArgs<ExtArgs>>
    ): Prisma__medical_historyClient<$Result.GetResult<Prisma.$medical_historyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Medical_history that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {medical_historyFindFirstOrThrowArgs} args - Arguments to find a Medical_history
     * @example
     * // Get one Medical_history
     * const medical_history = await prisma.medical_history.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends medical_historyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, medical_historyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__medical_historyClient<$Result.GetResult<Prisma.$medical_historyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Medical_histories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {medical_historyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Medical_histories
     * const medical_histories = await prisma.medical_history.findMany()
     * 
     * // Get first 10 Medical_histories
     * const medical_histories = await prisma.medical_history.findMany({ take: 10 })
     * 
     * // Only select the `history_id`
     * const medical_historyWithHistory_idOnly = await prisma.medical_history.findMany({ select: { history_id: true } })
     * 
    **/
    findMany<T extends medical_historyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, medical_historyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$medical_historyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Medical_history.
     * @param {medical_historyCreateArgs} args - Arguments to create a Medical_history.
     * @example
     * // Create one Medical_history
     * const Medical_history = await prisma.medical_history.create({
     *   data: {
     *     // ... data to create a Medical_history
     *   }
     * })
     * 
    **/
    create<T extends medical_historyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, medical_historyCreateArgs<ExtArgs>>
    ): Prisma__medical_historyClient<$Result.GetResult<Prisma.$medical_historyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Medical_histories.
     * @param {medical_historyCreateManyArgs} args - Arguments to create many Medical_histories.
     * @example
     * // Create many Medical_histories
     * const medical_history = await prisma.medical_history.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends medical_historyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, medical_historyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Medical_histories and returns the data saved in the database.
     * @param {medical_historyCreateManyAndReturnArgs} args - Arguments to create many Medical_histories.
     * @example
     * // Create many Medical_histories
     * const medical_history = await prisma.medical_history.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Medical_histories and only return the `history_id`
     * const medical_historyWithHistory_idOnly = await prisma.medical_history.createManyAndReturn({ 
     *   select: { history_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends medical_historyCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, medical_historyCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$medical_historyPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Medical_history.
     * @param {medical_historyDeleteArgs} args - Arguments to delete one Medical_history.
     * @example
     * // Delete one Medical_history
     * const Medical_history = await prisma.medical_history.delete({
     *   where: {
     *     // ... filter to delete one Medical_history
     *   }
     * })
     * 
    **/
    delete<T extends medical_historyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, medical_historyDeleteArgs<ExtArgs>>
    ): Prisma__medical_historyClient<$Result.GetResult<Prisma.$medical_historyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Medical_history.
     * @param {medical_historyUpdateArgs} args - Arguments to update one Medical_history.
     * @example
     * // Update one Medical_history
     * const medical_history = await prisma.medical_history.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends medical_historyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, medical_historyUpdateArgs<ExtArgs>>
    ): Prisma__medical_historyClient<$Result.GetResult<Prisma.$medical_historyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Medical_histories.
     * @param {medical_historyDeleteManyArgs} args - Arguments to filter Medical_histories to delete.
     * @example
     * // Delete a few Medical_histories
     * const { count } = await prisma.medical_history.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends medical_historyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, medical_historyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Medical_histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {medical_historyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Medical_histories
     * const medical_history = await prisma.medical_history.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends medical_historyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, medical_historyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Medical_history.
     * @param {medical_historyUpsertArgs} args - Arguments to update or create a Medical_history.
     * @example
     * // Update or create a Medical_history
     * const medical_history = await prisma.medical_history.upsert({
     *   create: {
     *     // ... data to create a Medical_history
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Medical_history we want to update
     *   }
     * })
    **/
    upsert<T extends medical_historyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, medical_historyUpsertArgs<ExtArgs>>
    ): Prisma__medical_historyClient<$Result.GetResult<Prisma.$medical_historyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Medical_histories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {medical_historyCountArgs} args - Arguments to filter Medical_histories to count.
     * @example
     * // Count the number of Medical_histories
     * const count = await prisma.medical_history.count({
     *   where: {
     *     // ... the filter for the Medical_histories we want to count
     *   }
     * })
    **/
    count<T extends medical_historyCountArgs>(
      args?: Subset<T, medical_historyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Medical_historyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Medical_history.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Medical_historyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Medical_historyAggregateArgs>(args: Subset<T, Medical_historyAggregateArgs>): Prisma.PrismaPromise<GetMedical_historyAggregateType<T>>

    /**
     * Group by Medical_history.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {medical_historyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends medical_historyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: medical_historyGroupByArgs['orderBy'] }
        : { orderBy?: medical_historyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, medical_historyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedical_historyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the medical_history model
   */
  readonly fields: medical_historyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for medical_history.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__medical_historyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    disease<T extends medical_history$diseaseArgs<ExtArgs> = {}>(args?: Subset<T, medical_history$diseaseArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$diseasePayload<ExtArgs>, T, 'findMany'> | Null>;

    patient<T extends patientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, patientDefaultArgs<ExtArgs>>): Prisma__patientClient<$Result.GetResult<Prisma.$patientPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the medical_history model
   */ 
  interface medical_historyFieldRefs {
    readonly history_id: FieldRef<"medical_history", 'String'>
    readonly history_name: FieldRef<"medical_history", 'String'>
    readonly description: FieldRef<"medical_history", 'String'>
    readonly patientId: FieldRef<"medical_history", 'String'>
  }
    

  // Custom InputTypes
  /**
   * medical_history findUnique
   */
  export type medical_historyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the medical_history
     */
    select?: medical_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: medical_historyInclude<ExtArgs> | null
    /**
     * Filter, which medical_history to fetch.
     */
    where: medical_historyWhereUniqueInput
  }

  /**
   * medical_history findUniqueOrThrow
   */
  export type medical_historyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the medical_history
     */
    select?: medical_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: medical_historyInclude<ExtArgs> | null
    /**
     * Filter, which medical_history to fetch.
     */
    where: medical_historyWhereUniqueInput
  }

  /**
   * medical_history findFirst
   */
  export type medical_historyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the medical_history
     */
    select?: medical_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: medical_historyInclude<ExtArgs> | null
    /**
     * Filter, which medical_history to fetch.
     */
    where?: medical_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of medical_histories to fetch.
     */
    orderBy?: medical_historyOrderByWithRelationInput | medical_historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for medical_histories.
     */
    cursor?: medical_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` medical_histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` medical_histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of medical_histories.
     */
    distinct?: Medical_historyScalarFieldEnum | Medical_historyScalarFieldEnum[]
  }

  /**
   * medical_history findFirstOrThrow
   */
  export type medical_historyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the medical_history
     */
    select?: medical_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: medical_historyInclude<ExtArgs> | null
    /**
     * Filter, which medical_history to fetch.
     */
    where?: medical_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of medical_histories to fetch.
     */
    orderBy?: medical_historyOrderByWithRelationInput | medical_historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for medical_histories.
     */
    cursor?: medical_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` medical_histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` medical_histories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of medical_histories.
     */
    distinct?: Medical_historyScalarFieldEnum | Medical_historyScalarFieldEnum[]
  }

  /**
   * medical_history findMany
   */
  export type medical_historyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the medical_history
     */
    select?: medical_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: medical_historyInclude<ExtArgs> | null
    /**
     * Filter, which medical_histories to fetch.
     */
    where?: medical_historyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of medical_histories to fetch.
     */
    orderBy?: medical_historyOrderByWithRelationInput | medical_historyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing medical_histories.
     */
    cursor?: medical_historyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` medical_histories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` medical_histories.
     */
    skip?: number
    distinct?: Medical_historyScalarFieldEnum | Medical_historyScalarFieldEnum[]
  }

  /**
   * medical_history create
   */
  export type medical_historyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the medical_history
     */
    select?: medical_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: medical_historyInclude<ExtArgs> | null
    /**
     * The data needed to create a medical_history.
     */
    data: XOR<medical_historyCreateInput, medical_historyUncheckedCreateInput>
  }

  /**
   * medical_history createMany
   */
  export type medical_historyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many medical_histories.
     */
    data: medical_historyCreateManyInput | medical_historyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * medical_history createManyAndReturn
   */
  export type medical_historyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the medical_history
     */
    select?: medical_historySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many medical_histories.
     */
    data: medical_historyCreateManyInput | medical_historyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: medical_historyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * medical_history update
   */
  export type medical_historyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the medical_history
     */
    select?: medical_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: medical_historyInclude<ExtArgs> | null
    /**
     * The data needed to update a medical_history.
     */
    data: XOR<medical_historyUpdateInput, medical_historyUncheckedUpdateInput>
    /**
     * Choose, which medical_history to update.
     */
    where: medical_historyWhereUniqueInput
  }

  /**
   * medical_history updateMany
   */
  export type medical_historyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update medical_histories.
     */
    data: XOR<medical_historyUpdateManyMutationInput, medical_historyUncheckedUpdateManyInput>
    /**
     * Filter which medical_histories to update
     */
    where?: medical_historyWhereInput
  }

  /**
   * medical_history upsert
   */
  export type medical_historyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the medical_history
     */
    select?: medical_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: medical_historyInclude<ExtArgs> | null
    /**
     * The filter to search for the medical_history to update in case it exists.
     */
    where: medical_historyWhereUniqueInput
    /**
     * In case the medical_history found by the `where` argument doesn't exist, create a new medical_history with this data.
     */
    create: XOR<medical_historyCreateInput, medical_historyUncheckedCreateInput>
    /**
     * In case the medical_history was found with the provided `where` argument, update it with this data.
     */
    update: XOR<medical_historyUpdateInput, medical_historyUncheckedUpdateInput>
  }

  /**
   * medical_history delete
   */
  export type medical_historyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the medical_history
     */
    select?: medical_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: medical_historyInclude<ExtArgs> | null
    /**
     * Filter which medical_history to delete.
     */
    where: medical_historyWhereUniqueInput
  }

  /**
   * medical_history deleteMany
   */
  export type medical_historyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which medical_histories to delete
     */
    where?: medical_historyWhereInput
  }

  /**
   * medical_history.disease
   */
  export type medical_history$diseaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the disease
     */
    select?: diseaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: diseaseInclude<ExtArgs> | null
    where?: diseaseWhereInput
    orderBy?: diseaseOrderByWithRelationInput | diseaseOrderByWithRelationInput[]
    cursor?: diseaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DiseaseScalarFieldEnum | DiseaseScalarFieldEnum[]
  }

  /**
   * medical_history without action
   */
  export type medical_historyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the medical_history
     */
    select?: medical_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: medical_historyInclude<ExtArgs> | null
  }


  /**
   * Model disease
   */

  export type AggregateDisease = {
    _count: DiseaseCountAggregateOutputType | null
    _min: DiseaseMinAggregateOutputType | null
    _max: DiseaseMaxAggregateOutputType | null
  }

  export type DiseaseMinAggregateOutputType = {
    disease_id: string | null
    disease_name: string | null
    history_id: string | null
  }

  export type DiseaseMaxAggregateOutputType = {
    disease_id: string | null
    disease_name: string | null
    history_id: string | null
  }

  export type DiseaseCountAggregateOutputType = {
    disease_id: number
    disease_name: number
    history_id: number
    _all: number
  }


  export type DiseaseMinAggregateInputType = {
    disease_id?: true
    disease_name?: true
    history_id?: true
  }

  export type DiseaseMaxAggregateInputType = {
    disease_id?: true
    disease_name?: true
    history_id?: true
  }

  export type DiseaseCountAggregateInputType = {
    disease_id?: true
    disease_name?: true
    history_id?: true
    _all?: true
  }

  export type DiseaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which disease to aggregate.
     */
    where?: diseaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of diseases to fetch.
     */
    orderBy?: diseaseOrderByWithRelationInput | diseaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: diseaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` diseases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` diseases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned diseases
    **/
    _count?: true | DiseaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiseaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiseaseMaxAggregateInputType
  }

  export type GetDiseaseAggregateType<T extends DiseaseAggregateArgs> = {
        [P in keyof T & keyof AggregateDisease]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDisease[P]>
      : GetScalarType<T[P], AggregateDisease[P]>
  }




  export type diseaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: diseaseWhereInput
    orderBy?: diseaseOrderByWithAggregationInput | diseaseOrderByWithAggregationInput[]
    by: DiseaseScalarFieldEnum[] | DiseaseScalarFieldEnum
    having?: diseaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiseaseCountAggregateInputType | true
    _min?: DiseaseMinAggregateInputType
    _max?: DiseaseMaxAggregateInputType
  }

  export type DiseaseGroupByOutputType = {
    disease_id: string
    disease_name: string
    history_id: string
    _count: DiseaseCountAggregateOutputType | null
    _min: DiseaseMinAggregateOutputType | null
    _max: DiseaseMaxAggregateOutputType | null
  }

  type GetDiseaseGroupByPayload<T extends diseaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DiseaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiseaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiseaseGroupByOutputType[P]>
            : GetScalarType<T[P], DiseaseGroupByOutputType[P]>
        }
      >
    >


  export type diseaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    disease_id?: boolean
    disease_name?: boolean
    history_id?: boolean
    history?: boolean | medical_historyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["disease"]>

  export type diseaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    disease_id?: boolean
    disease_name?: boolean
    history_id?: boolean
    history?: boolean | medical_historyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["disease"]>

  export type diseaseSelectScalar = {
    disease_id?: boolean
    disease_name?: boolean
    history_id?: boolean
  }

  export type diseaseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    history?: boolean | medical_historyDefaultArgs<ExtArgs>
  }
  export type diseaseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    history?: boolean | medical_historyDefaultArgs<ExtArgs>
  }

  export type $diseasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "disease"
    objects: {
      history: Prisma.$medical_historyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      disease_id: string
      disease_name: string
      history_id: string
    }, ExtArgs["result"]["disease"]>
    composites: {}
  }

  type diseaseGetPayload<S extends boolean | null | undefined | diseaseDefaultArgs> = $Result.GetResult<Prisma.$diseasePayload, S>

  type diseaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<diseaseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DiseaseCountAggregateInputType | true
    }

  export interface diseaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['disease'], meta: { name: 'disease' } }
    /**
     * Find zero or one Disease that matches the filter.
     * @param {diseaseFindUniqueArgs} args - Arguments to find a Disease
     * @example
     * // Get one Disease
     * const disease = await prisma.disease.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends diseaseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, diseaseFindUniqueArgs<ExtArgs>>
    ): Prisma__diseaseClient<$Result.GetResult<Prisma.$diseasePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Disease that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {diseaseFindUniqueOrThrowArgs} args - Arguments to find a Disease
     * @example
     * // Get one Disease
     * const disease = await prisma.disease.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends diseaseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, diseaseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__diseaseClient<$Result.GetResult<Prisma.$diseasePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Disease that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {diseaseFindFirstArgs} args - Arguments to find a Disease
     * @example
     * // Get one Disease
     * const disease = await prisma.disease.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends diseaseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, diseaseFindFirstArgs<ExtArgs>>
    ): Prisma__diseaseClient<$Result.GetResult<Prisma.$diseasePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Disease that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {diseaseFindFirstOrThrowArgs} args - Arguments to find a Disease
     * @example
     * // Get one Disease
     * const disease = await prisma.disease.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends diseaseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, diseaseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__diseaseClient<$Result.GetResult<Prisma.$diseasePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Diseases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {diseaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Diseases
     * const diseases = await prisma.disease.findMany()
     * 
     * // Get first 10 Diseases
     * const diseases = await prisma.disease.findMany({ take: 10 })
     * 
     * // Only select the `disease_id`
     * const diseaseWithDisease_idOnly = await prisma.disease.findMany({ select: { disease_id: true } })
     * 
    **/
    findMany<T extends diseaseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, diseaseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$diseasePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Disease.
     * @param {diseaseCreateArgs} args - Arguments to create a Disease.
     * @example
     * // Create one Disease
     * const Disease = await prisma.disease.create({
     *   data: {
     *     // ... data to create a Disease
     *   }
     * })
     * 
    **/
    create<T extends diseaseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, diseaseCreateArgs<ExtArgs>>
    ): Prisma__diseaseClient<$Result.GetResult<Prisma.$diseasePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Diseases.
     * @param {diseaseCreateManyArgs} args - Arguments to create many Diseases.
     * @example
     * // Create many Diseases
     * const disease = await prisma.disease.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends diseaseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, diseaseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Diseases and returns the data saved in the database.
     * @param {diseaseCreateManyAndReturnArgs} args - Arguments to create many Diseases.
     * @example
     * // Create many Diseases
     * const disease = await prisma.disease.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Diseases and only return the `disease_id`
     * const diseaseWithDisease_idOnly = await prisma.disease.createManyAndReturn({ 
     *   select: { disease_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends diseaseCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, diseaseCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$diseasePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Disease.
     * @param {diseaseDeleteArgs} args - Arguments to delete one Disease.
     * @example
     * // Delete one Disease
     * const Disease = await prisma.disease.delete({
     *   where: {
     *     // ... filter to delete one Disease
     *   }
     * })
     * 
    **/
    delete<T extends diseaseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, diseaseDeleteArgs<ExtArgs>>
    ): Prisma__diseaseClient<$Result.GetResult<Prisma.$diseasePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Disease.
     * @param {diseaseUpdateArgs} args - Arguments to update one Disease.
     * @example
     * // Update one Disease
     * const disease = await prisma.disease.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends diseaseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, diseaseUpdateArgs<ExtArgs>>
    ): Prisma__diseaseClient<$Result.GetResult<Prisma.$diseasePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Diseases.
     * @param {diseaseDeleteManyArgs} args - Arguments to filter Diseases to delete.
     * @example
     * // Delete a few Diseases
     * const { count } = await prisma.disease.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends diseaseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, diseaseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Diseases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {diseaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Diseases
     * const disease = await prisma.disease.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends diseaseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, diseaseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Disease.
     * @param {diseaseUpsertArgs} args - Arguments to update or create a Disease.
     * @example
     * // Update or create a Disease
     * const disease = await prisma.disease.upsert({
     *   create: {
     *     // ... data to create a Disease
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Disease we want to update
     *   }
     * })
    **/
    upsert<T extends diseaseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, diseaseUpsertArgs<ExtArgs>>
    ): Prisma__diseaseClient<$Result.GetResult<Prisma.$diseasePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Diseases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {diseaseCountArgs} args - Arguments to filter Diseases to count.
     * @example
     * // Count the number of Diseases
     * const count = await prisma.disease.count({
     *   where: {
     *     // ... the filter for the Diseases we want to count
     *   }
     * })
    **/
    count<T extends diseaseCountArgs>(
      args?: Subset<T, diseaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiseaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Disease.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiseaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiseaseAggregateArgs>(args: Subset<T, DiseaseAggregateArgs>): Prisma.PrismaPromise<GetDiseaseAggregateType<T>>

    /**
     * Group by Disease.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {diseaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends diseaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: diseaseGroupByArgs['orderBy'] }
        : { orderBy?: diseaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, diseaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiseaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the disease model
   */
  readonly fields: diseaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for disease.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__diseaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    history<T extends medical_historyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, medical_historyDefaultArgs<ExtArgs>>): Prisma__medical_historyClient<$Result.GetResult<Prisma.$medical_historyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the disease model
   */ 
  interface diseaseFieldRefs {
    readonly disease_id: FieldRef<"disease", 'String'>
    readonly disease_name: FieldRef<"disease", 'String'>
    readonly history_id: FieldRef<"disease", 'String'>
  }
    

  // Custom InputTypes
  /**
   * disease findUnique
   */
  export type diseaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the disease
     */
    select?: diseaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: diseaseInclude<ExtArgs> | null
    /**
     * Filter, which disease to fetch.
     */
    where: diseaseWhereUniqueInput
  }

  /**
   * disease findUniqueOrThrow
   */
  export type diseaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the disease
     */
    select?: diseaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: diseaseInclude<ExtArgs> | null
    /**
     * Filter, which disease to fetch.
     */
    where: diseaseWhereUniqueInput
  }

  /**
   * disease findFirst
   */
  export type diseaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the disease
     */
    select?: diseaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: diseaseInclude<ExtArgs> | null
    /**
     * Filter, which disease to fetch.
     */
    where?: diseaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of diseases to fetch.
     */
    orderBy?: diseaseOrderByWithRelationInput | diseaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for diseases.
     */
    cursor?: diseaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` diseases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` diseases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of diseases.
     */
    distinct?: DiseaseScalarFieldEnum | DiseaseScalarFieldEnum[]
  }

  /**
   * disease findFirstOrThrow
   */
  export type diseaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the disease
     */
    select?: diseaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: diseaseInclude<ExtArgs> | null
    /**
     * Filter, which disease to fetch.
     */
    where?: diseaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of diseases to fetch.
     */
    orderBy?: diseaseOrderByWithRelationInput | diseaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for diseases.
     */
    cursor?: diseaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` diseases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` diseases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of diseases.
     */
    distinct?: DiseaseScalarFieldEnum | DiseaseScalarFieldEnum[]
  }

  /**
   * disease findMany
   */
  export type diseaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the disease
     */
    select?: diseaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: diseaseInclude<ExtArgs> | null
    /**
     * Filter, which diseases to fetch.
     */
    where?: diseaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of diseases to fetch.
     */
    orderBy?: diseaseOrderByWithRelationInput | diseaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing diseases.
     */
    cursor?: diseaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` diseases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` diseases.
     */
    skip?: number
    distinct?: DiseaseScalarFieldEnum | DiseaseScalarFieldEnum[]
  }

  /**
   * disease create
   */
  export type diseaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the disease
     */
    select?: diseaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: diseaseInclude<ExtArgs> | null
    /**
     * The data needed to create a disease.
     */
    data: XOR<diseaseCreateInput, diseaseUncheckedCreateInput>
  }

  /**
   * disease createMany
   */
  export type diseaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many diseases.
     */
    data: diseaseCreateManyInput | diseaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * disease createManyAndReturn
   */
  export type diseaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the disease
     */
    select?: diseaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many diseases.
     */
    data: diseaseCreateManyInput | diseaseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: diseaseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * disease update
   */
  export type diseaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the disease
     */
    select?: diseaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: diseaseInclude<ExtArgs> | null
    /**
     * The data needed to update a disease.
     */
    data: XOR<diseaseUpdateInput, diseaseUncheckedUpdateInput>
    /**
     * Choose, which disease to update.
     */
    where: diseaseWhereUniqueInput
  }

  /**
   * disease updateMany
   */
  export type diseaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update diseases.
     */
    data: XOR<diseaseUpdateManyMutationInput, diseaseUncheckedUpdateManyInput>
    /**
     * Filter which diseases to update
     */
    where?: diseaseWhereInput
  }

  /**
   * disease upsert
   */
  export type diseaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the disease
     */
    select?: diseaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: diseaseInclude<ExtArgs> | null
    /**
     * The filter to search for the disease to update in case it exists.
     */
    where: diseaseWhereUniqueInput
    /**
     * In case the disease found by the `where` argument doesn't exist, create a new disease with this data.
     */
    create: XOR<diseaseCreateInput, diseaseUncheckedCreateInput>
    /**
     * In case the disease was found with the provided `where` argument, update it with this data.
     */
    update: XOR<diseaseUpdateInput, diseaseUncheckedUpdateInput>
  }

  /**
   * disease delete
   */
  export type diseaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the disease
     */
    select?: diseaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: diseaseInclude<ExtArgs> | null
    /**
     * Filter which disease to delete.
     */
    where: diseaseWhereUniqueInput
  }

  /**
   * disease deleteMany
   */
  export type diseaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which diseases to delete
     */
    where?: diseaseWhereInput
  }

  /**
   * disease without action
   */
  export type diseaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the disease
     */
    select?: diseaseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: diseaseInclude<ExtArgs> | null
  }


  /**
   * Model measurement
   */

  export type AggregateMeasurement = {
    _count: MeasurementCountAggregateOutputType | null
    _avg: MeasurementAvgAggregateOutputType | null
    _sum: MeasurementSumAggregateOutputType | null
    _min: MeasurementMinAggregateOutputType | null
    _max: MeasurementMaxAggregateOutputType | null
  }

  export type MeasurementAvgAggregateOutputType = {
    measurement_value: number | null
  }

  export type MeasurementSumAggregateOutputType = {
    measurement_value: number | null
  }

  export type MeasurementMinAggregateOutputType = {
    measurement_id: string | null
    name: string | null
    owner_id: string | null
    measaurement_type: $Enums.mesaurement_types | null
    measurement_value: number | null
    measaurement_unit: string | null
    measurement_on: Date | null
    created_at: Date | null
  }

  export type MeasurementMaxAggregateOutputType = {
    measurement_id: string | null
    name: string | null
    owner_id: string | null
    measaurement_type: $Enums.mesaurement_types | null
    measurement_value: number | null
    measaurement_unit: string | null
    measurement_on: Date | null
    created_at: Date | null
  }

  export type MeasurementCountAggregateOutputType = {
    measurement_id: number
    name: number
    owner_id: number
    measaurement_type: number
    measurement_value: number
    measaurement_unit: number
    measurement_on: number
    created_at: number
    _all: number
  }


  export type MeasurementAvgAggregateInputType = {
    measurement_value?: true
  }

  export type MeasurementSumAggregateInputType = {
    measurement_value?: true
  }

  export type MeasurementMinAggregateInputType = {
    measurement_id?: true
    name?: true
    owner_id?: true
    measaurement_type?: true
    measurement_value?: true
    measaurement_unit?: true
    measurement_on?: true
    created_at?: true
  }

  export type MeasurementMaxAggregateInputType = {
    measurement_id?: true
    name?: true
    owner_id?: true
    measaurement_type?: true
    measurement_value?: true
    measaurement_unit?: true
    measurement_on?: true
    created_at?: true
  }

  export type MeasurementCountAggregateInputType = {
    measurement_id?: true
    name?: true
    owner_id?: true
    measaurement_type?: true
    measurement_value?: true
    measaurement_unit?: true
    measurement_on?: true
    created_at?: true
    _all?: true
  }

  export type MeasurementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which measurement to aggregate.
     */
    where?: measurementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of measurements to fetch.
     */
    orderBy?: measurementOrderByWithRelationInput | measurementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: measurementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` measurements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` measurements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned measurements
    **/
    _count?: true | MeasurementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MeasurementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MeasurementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeasurementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeasurementMaxAggregateInputType
  }

  export type GetMeasurementAggregateType<T extends MeasurementAggregateArgs> = {
        [P in keyof T & keyof AggregateMeasurement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeasurement[P]>
      : GetScalarType<T[P], AggregateMeasurement[P]>
  }




  export type measurementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: measurementWhereInput
    orderBy?: measurementOrderByWithAggregationInput | measurementOrderByWithAggregationInput[]
    by: MeasurementScalarFieldEnum[] | MeasurementScalarFieldEnum
    having?: measurementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeasurementCountAggregateInputType | true
    _avg?: MeasurementAvgAggregateInputType
    _sum?: MeasurementSumAggregateInputType
    _min?: MeasurementMinAggregateInputType
    _max?: MeasurementMaxAggregateInputType
  }

  export type MeasurementGroupByOutputType = {
    measurement_id: string
    name: string
    owner_id: string
    measaurement_type: $Enums.mesaurement_types
    measurement_value: number
    measaurement_unit: string
    measurement_on: Date
    created_at: Date
    _count: MeasurementCountAggregateOutputType | null
    _avg: MeasurementAvgAggregateOutputType | null
    _sum: MeasurementSumAggregateOutputType | null
    _min: MeasurementMinAggregateOutputType | null
    _max: MeasurementMaxAggregateOutputType | null
  }

  type GetMeasurementGroupByPayload<T extends measurementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MeasurementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeasurementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeasurementGroupByOutputType[P]>
            : GetScalarType<T[P], MeasurementGroupByOutputType[P]>
        }
      >
    >


  export type measurementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    measurement_id?: boolean
    name?: boolean
    owner_id?: boolean
    measaurement_type?: boolean
    measurement_value?: boolean
    measaurement_unit?: boolean
    measurement_on?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["measurement"]>

  export type measurementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    measurement_id?: boolean
    name?: boolean
    owner_id?: boolean
    measaurement_type?: boolean
    measurement_value?: boolean
    measaurement_unit?: boolean
    measurement_on?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["measurement"]>

  export type measurementSelectScalar = {
    measurement_id?: boolean
    name?: boolean
    owner_id?: boolean
    measaurement_type?: boolean
    measurement_value?: boolean
    measaurement_unit?: boolean
    measurement_on?: boolean
    created_at?: boolean
  }


  export type $measurementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "measurement"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      measurement_id: string
      name: string
      owner_id: string
      measaurement_type: $Enums.mesaurement_types
      measurement_value: number
      measaurement_unit: string
      measurement_on: Date
      created_at: Date
    }, ExtArgs["result"]["measurement"]>
    composites: {}
  }

  type measurementGetPayload<S extends boolean | null | undefined | measurementDefaultArgs> = $Result.GetResult<Prisma.$measurementPayload, S>

  type measurementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<measurementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MeasurementCountAggregateInputType | true
    }

  export interface measurementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['measurement'], meta: { name: 'measurement' } }
    /**
     * Find zero or one Measurement that matches the filter.
     * @param {measurementFindUniqueArgs} args - Arguments to find a Measurement
     * @example
     * // Get one Measurement
     * const measurement = await prisma.measurement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends measurementFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, measurementFindUniqueArgs<ExtArgs>>
    ): Prisma__measurementClient<$Result.GetResult<Prisma.$measurementPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Measurement that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {measurementFindUniqueOrThrowArgs} args - Arguments to find a Measurement
     * @example
     * // Get one Measurement
     * const measurement = await prisma.measurement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends measurementFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, measurementFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__measurementClient<$Result.GetResult<Prisma.$measurementPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Measurement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {measurementFindFirstArgs} args - Arguments to find a Measurement
     * @example
     * // Get one Measurement
     * const measurement = await prisma.measurement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends measurementFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, measurementFindFirstArgs<ExtArgs>>
    ): Prisma__measurementClient<$Result.GetResult<Prisma.$measurementPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Measurement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {measurementFindFirstOrThrowArgs} args - Arguments to find a Measurement
     * @example
     * // Get one Measurement
     * const measurement = await prisma.measurement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends measurementFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, measurementFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__measurementClient<$Result.GetResult<Prisma.$measurementPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Measurements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {measurementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Measurements
     * const measurements = await prisma.measurement.findMany()
     * 
     * // Get first 10 Measurements
     * const measurements = await prisma.measurement.findMany({ take: 10 })
     * 
     * // Only select the `measurement_id`
     * const measurementWithMeasurement_idOnly = await prisma.measurement.findMany({ select: { measurement_id: true } })
     * 
    **/
    findMany<T extends measurementFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, measurementFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$measurementPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Measurement.
     * @param {measurementCreateArgs} args - Arguments to create a Measurement.
     * @example
     * // Create one Measurement
     * const Measurement = await prisma.measurement.create({
     *   data: {
     *     // ... data to create a Measurement
     *   }
     * })
     * 
    **/
    create<T extends measurementCreateArgs<ExtArgs>>(
      args: SelectSubset<T, measurementCreateArgs<ExtArgs>>
    ): Prisma__measurementClient<$Result.GetResult<Prisma.$measurementPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Measurements.
     * @param {measurementCreateManyArgs} args - Arguments to create many Measurements.
     * @example
     * // Create many Measurements
     * const measurement = await prisma.measurement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends measurementCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, measurementCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Measurements and returns the data saved in the database.
     * @param {measurementCreateManyAndReturnArgs} args - Arguments to create many Measurements.
     * @example
     * // Create many Measurements
     * const measurement = await prisma.measurement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Measurements and only return the `measurement_id`
     * const measurementWithMeasurement_idOnly = await prisma.measurement.createManyAndReturn({ 
     *   select: { measurement_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends measurementCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, measurementCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$measurementPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Measurement.
     * @param {measurementDeleteArgs} args - Arguments to delete one Measurement.
     * @example
     * // Delete one Measurement
     * const Measurement = await prisma.measurement.delete({
     *   where: {
     *     // ... filter to delete one Measurement
     *   }
     * })
     * 
    **/
    delete<T extends measurementDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, measurementDeleteArgs<ExtArgs>>
    ): Prisma__measurementClient<$Result.GetResult<Prisma.$measurementPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Measurement.
     * @param {measurementUpdateArgs} args - Arguments to update one Measurement.
     * @example
     * // Update one Measurement
     * const measurement = await prisma.measurement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends measurementUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, measurementUpdateArgs<ExtArgs>>
    ): Prisma__measurementClient<$Result.GetResult<Prisma.$measurementPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Measurements.
     * @param {measurementDeleteManyArgs} args - Arguments to filter Measurements to delete.
     * @example
     * // Delete a few Measurements
     * const { count } = await prisma.measurement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends measurementDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, measurementDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Measurements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {measurementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Measurements
     * const measurement = await prisma.measurement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends measurementUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, measurementUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Measurement.
     * @param {measurementUpsertArgs} args - Arguments to update or create a Measurement.
     * @example
     * // Update or create a Measurement
     * const measurement = await prisma.measurement.upsert({
     *   create: {
     *     // ... data to create a Measurement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Measurement we want to update
     *   }
     * })
    **/
    upsert<T extends measurementUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, measurementUpsertArgs<ExtArgs>>
    ): Prisma__measurementClient<$Result.GetResult<Prisma.$measurementPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Measurements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {measurementCountArgs} args - Arguments to filter Measurements to count.
     * @example
     * // Count the number of Measurements
     * const count = await prisma.measurement.count({
     *   where: {
     *     // ... the filter for the Measurements we want to count
     *   }
     * })
    **/
    count<T extends measurementCountArgs>(
      args?: Subset<T, measurementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeasurementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Measurement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeasurementAggregateArgs>(args: Subset<T, MeasurementAggregateArgs>): Prisma.PrismaPromise<GetMeasurementAggregateType<T>>

    /**
     * Group by Measurement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {measurementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends measurementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: measurementGroupByArgs['orderBy'] }
        : { orderBy?: measurementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, measurementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeasurementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the measurement model
   */
  readonly fields: measurementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for measurement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__measurementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the measurement model
   */ 
  interface measurementFieldRefs {
    readonly measurement_id: FieldRef<"measurement", 'String'>
    readonly name: FieldRef<"measurement", 'String'>
    readonly owner_id: FieldRef<"measurement", 'String'>
    readonly measaurement_type: FieldRef<"measurement", 'mesaurement_types'>
    readonly measurement_value: FieldRef<"measurement", 'Float'>
    readonly measaurement_unit: FieldRef<"measurement", 'String'>
    readonly measurement_on: FieldRef<"measurement", 'DateTime'>
    readonly created_at: FieldRef<"measurement", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * measurement findUnique
   */
  export type measurementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the measurement
     */
    select?: measurementSelect<ExtArgs> | null
    /**
     * Filter, which measurement to fetch.
     */
    where: measurementWhereUniqueInput
  }

  /**
   * measurement findUniqueOrThrow
   */
  export type measurementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the measurement
     */
    select?: measurementSelect<ExtArgs> | null
    /**
     * Filter, which measurement to fetch.
     */
    where: measurementWhereUniqueInput
  }

  /**
   * measurement findFirst
   */
  export type measurementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the measurement
     */
    select?: measurementSelect<ExtArgs> | null
    /**
     * Filter, which measurement to fetch.
     */
    where?: measurementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of measurements to fetch.
     */
    orderBy?: measurementOrderByWithRelationInput | measurementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for measurements.
     */
    cursor?: measurementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` measurements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` measurements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of measurements.
     */
    distinct?: MeasurementScalarFieldEnum | MeasurementScalarFieldEnum[]
  }

  /**
   * measurement findFirstOrThrow
   */
  export type measurementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the measurement
     */
    select?: measurementSelect<ExtArgs> | null
    /**
     * Filter, which measurement to fetch.
     */
    where?: measurementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of measurements to fetch.
     */
    orderBy?: measurementOrderByWithRelationInput | measurementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for measurements.
     */
    cursor?: measurementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` measurements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` measurements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of measurements.
     */
    distinct?: MeasurementScalarFieldEnum | MeasurementScalarFieldEnum[]
  }

  /**
   * measurement findMany
   */
  export type measurementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the measurement
     */
    select?: measurementSelect<ExtArgs> | null
    /**
     * Filter, which measurements to fetch.
     */
    where?: measurementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of measurements to fetch.
     */
    orderBy?: measurementOrderByWithRelationInput | measurementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing measurements.
     */
    cursor?: measurementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` measurements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` measurements.
     */
    skip?: number
    distinct?: MeasurementScalarFieldEnum | MeasurementScalarFieldEnum[]
  }

  /**
   * measurement create
   */
  export type measurementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the measurement
     */
    select?: measurementSelect<ExtArgs> | null
    /**
     * The data needed to create a measurement.
     */
    data: XOR<measurementCreateInput, measurementUncheckedCreateInput>
  }

  /**
   * measurement createMany
   */
  export type measurementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many measurements.
     */
    data: measurementCreateManyInput | measurementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * measurement createManyAndReturn
   */
  export type measurementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the measurement
     */
    select?: measurementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many measurements.
     */
    data: measurementCreateManyInput | measurementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * measurement update
   */
  export type measurementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the measurement
     */
    select?: measurementSelect<ExtArgs> | null
    /**
     * The data needed to update a measurement.
     */
    data: XOR<measurementUpdateInput, measurementUncheckedUpdateInput>
    /**
     * Choose, which measurement to update.
     */
    where: measurementWhereUniqueInput
  }

  /**
   * measurement updateMany
   */
  export type measurementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update measurements.
     */
    data: XOR<measurementUpdateManyMutationInput, measurementUncheckedUpdateManyInput>
    /**
     * Filter which measurements to update
     */
    where?: measurementWhereInput
  }

  /**
   * measurement upsert
   */
  export type measurementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the measurement
     */
    select?: measurementSelect<ExtArgs> | null
    /**
     * The filter to search for the measurement to update in case it exists.
     */
    where: measurementWhereUniqueInput
    /**
     * In case the measurement found by the `where` argument doesn't exist, create a new measurement with this data.
     */
    create: XOR<measurementCreateInput, measurementUncheckedCreateInput>
    /**
     * In case the measurement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<measurementUpdateInput, measurementUncheckedUpdateInput>
  }

  /**
   * measurement delete
   */
  export type measurementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the measurement
     */
    select?: measurementSelect<ExtArgs> | null
    /**
     * Filter which measurement to delete.
     */
    where: measurementWhereUniqueInput
  }

  /**
   * measurement deleteMany
   */
  export type measurementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which measurements to delete
     */
    where?: measurementWhereInput
  }

  /**
   * measurement without action
   */
  export type measurementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the measurement
     */
    select?: measurementSelect<ExtArgs> | null
  }


  /**
   * Model prescribed_medication
   */

  export type AggregatePrescribed_medication = {
    _count: Prescribed_medicationCountAggregateOutputType | null
    _min: Prescribed_medicationMinAggregateOutputType | null
    _max: Prescribed_medicationMaxAggregateOutputType | null
  }

  export type Prescribed_medicationMinAggregateOutputType = {
    medication_id: string | null
    patient_id: string | null
    status: $Enums.status | null
    frequency: string | null
    doctor_id: string | null
    start_date: Date | null
    end_date: Date | null
  }

  export type Prescribed_medicationMaxAggregateOutputType = {
    medication_id: string | null
    patient_id: string | null
    status: $Enums.status | null
    frequency: string | null
    doctor_id: string | null
    start_date: Date | null
    end_date: Date | null
  }

  export type Prescribed_medicationCountAggregateOutputType = {
    medication_id: number
    patient_id: number
    status: number
    frequency: number
    doctor_id: number
    start_date: number
    end_date: number
    _all: number
  }


  export type Prescribed_medicationMinAggregateInputType = {
    medication_id?: true
    patient_id?: true
    status?: true
    frequency?: true
    doctor_id?: true
    start_date?: true
    end_date?: true
  }

  export type Prescribed_medicationMaxAggregateInputType = {
    medication_id?: true
    patient_id?: true
    status?: true
    frequency?: true
    doctor_id?: true
    start_date?: true
    end_date?: true
  }

  export type Prescribed_medicationCountAggregateInputType = {
    medication_id?: true
    patient_id?: true
    status?: true
    frequency?: true
    doctor_id?: true
    start_date?: true
    end_date?: true
    _all?: true
  }

  export type Prescribed_medicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which prescribed_medication to aggregate.
     */
    where?: prescribed_medicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of prescribed_medications to fetch.
     */
    orderBy?: prescribed_medicationOrderByWithRelationInput | prescribed_medicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: prescribed_medicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` prescribed_medications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` prescribed_medications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned prescribed_medications
    **/
    _count?: true | Prescribed_medicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Prescribed_medicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Prescribed_medicationMaxAggregateInputType
  }

  export type GetPrescribed_medicationAggregateType<T extends Prescribed_medicationAggregateArgs> = {
        [P in keyof T & keyof AggregatePrescribed_medication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrescribed_medication[P]>
      : GetScalarType<T[P], AggregatePrescribed_medication[P]>
  }




  export type prescribed_medicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: prescribed_medicationWhereInput
    orderBy?: prescribed_medicationOrderByWithAggregationInput | prescribed_medicationOrderByWithAggregationInput[]
    by: Prescribed_medicationScalarFieldEnum[] | Prescribed_medicationScalarFieldEnum
    having?: prescribed_medicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Prescribed_medicationCountAggregateInputType | true
    _min?: Prescribed_medicationMinAggregateInputType
    _max?: Prescribed_medicationMaxAggregateInputType
  }

  export type Prescribed_medicationGroupByOutputType = {
    medication_id: string
    patient_id: string
    status: $Enums.status
    frequency: string
    doctor_id: string
    start_date: Date
    end_date: Date
    _count: Prescribed_medicationCountAggregateOutputType | null
    _min: Prescribed_medicationMinAggregateOutputType | null
    _max: Prescribed_medicationMaxAggregateOutputType | null
  }

  type GetPrescribed_medicationGroupByPayload<T extends prescribed_medicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Prescribed_medicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Prescribed_medicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Prescribed_medicationGroupByOutputType[P]>
            : GetScalarType<T[P], Prescribed_medicationGroupByOutputType[P]>
        }
      >
    >


  export type prescribed_medicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    medication_id?: boolean
    patient_id?: boolean
    status?: boolean
    frequency?: boolean
    doctor_id?: boolean
    start_date?: boolean
    end_date?: boolean
    medication?: boolean | medicationDefaultArgs<ExtArgs>
    patient?: boolean | patientDefaultArgs<ExtArgs>
    prescribing_physician?: boolean | doctorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["prescribed_medication"]>

  export type prescribed_medicationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    medication_id?: boolean
    patient_id?: boolean
    status?: boolean
    frequency?: boolean
    doctor_id?: boolean
    start_date?: boolean
    end_date?: boolean
    medication?: boolean | medicationDefaultArgs<ExtArgs>
    patient?: boolean | patientDefaultArgs<ExtArgs>
    prescribing_physician?: boolean | doctorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["prescribed_medication"]>

  export type prescribed_medicationSelectScalar = {
    medication_id?: boolean
    patient_id?: boolean
    status?: boolean
    frequency?: boolean
    doctor_id?: boolean
    start_date?: boolean
    end_date?: boolean
  }

  export type prescribed_medicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medication?: boolean | medicationDefaultArgs<ExtArgs>
    patient?: boolean | patientDefaultArgs<ExtArgs>
    prescribing_physician?: boolean | doctorDefaultArgs<ExtArgs>
  }
  export type prescribed_medicationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medication?: boolean | medicationDefaultArgs<ExtArgs>
    patient?: boolean | patientDefaultArgs<ExtArgs>
    prescribing_physician?: boolean | doctorDefaultArgs<ExtArgs>
  }

  export type $prescribed_medicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "prescribed_medication"
    objects: {
      medication: Prisma.$medicationPayload<ExtArgs>
      patient: Prisma.$patientPayload<ExtArgs>
      prescribing_physician: Prisma.$doctorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      medication_id: string
      patient_id: string
      status: $Enums.status
      frequency: string
      doctor_id: string
      start_date: Date
      end_date: Date
    }, ExtArgs["result"]["prescribed_medication"]>
    composites: {}
  }

  type prescribed_medicationGetPayload<S extends boolean | null | undefined | prescribed_medicationDefaultArgs> = $Result.GetResult<Prisma.$prescribed_medicationPayload, S>

  type prescribed_medicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<prescribed_medicationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Prescribed_medicationCountAggregateInputType | true
    }

  export interface prescribed_medicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['prescribed_medication'], meta: { name: 'prescribed_medication' } }
    /**
     * Find zero or one Prescribed_medication that matches the filter.
     * @param {prescribed_medicationFindUniqueArgs} args - Arguments to find a Prescribed_medication
     * @example
     * // Get one Prescribed_medication
     * const prescribed_medication = await prisma.prescribed_medication.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends prescribed_medicationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, prescribed_medicationFindUniqueArgs<ExtArgs>>
    ): Prisma__prescribed_medicationClient<$Result.GetResult<Prisma.$prescribed_medicationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Prescribed_medication that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {prescribed_medicationFindUniqueOrThrowArgs} args - Arguments to find a Prescribed_medication
     * @example
     * // Get one Prescribed_medication
     * const prescribed_medication = await prisma.prescribed_medication.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends prescribed_medicationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, prescribed_medicationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__prescribed_medicationClient<$Result.GetResult<Prisma.$prescribed_medicationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Prescribed_medication that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prescribed_medicationFindFirstArgs} args - Arguments to find a Prescribed_medication
     * @example
     * // Get one Prescribed_medication
     * const prescribed_medication = await prisma.prescribed_medication.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends prescribed_medicationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, prescribed_medicationFindFirstArgs<ExtArgs>>
    ): Prisma__prescribed_medicationClient<$Result.GetResult<Prisma.$prescribed_medicationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Prescribed_medication that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prescribed_medicationFindFirstOrThrowArgs} args - Arguments to find a Prescribed_medication
     * @example
     * // Get one Prescribed_medication
     * const prescribed_medication = await prisma.prescribed_medication.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends prescribed_medicationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, prescribed_medicationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__prescribed_medicationClient<$Result.GetResult<Prisma.$prescribed_medicationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Prescribed_medications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prescribed_medicationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Prescribed_medications
     * const prescribed_medications = await prisma.prescribed_medication.findMany()
     * 
     * // Get first 10 Prescribed_medications
     * const prescribed_medications = await prisma.prescribed_medication.findMany({ take: 10 })
     * 
     * // Only select the `medication_id`
     * const prescribed_medicationWithMedication_idOnly = await prisma.prescribed_medication.findMany({ select: { medication_id: true } })
     * 
    **/
    findMany<T extends prescribed_medicationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, prescribed_medicationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$prescribed_medicationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Prescribed_medication.
     * @param {prescribed_medicationCreateArgs} args - Arguments to create a Prescribed_medication.
     * @example
     * // Create one Prescribed_medication
     * const Prescribed_medication = await prisma.prescribed_medication.create({
     *   data: {
     *     // ... data to create a Prescribed_medication
     *   }
     * })
     * 
    **/
    create<T extends prescribed_medicationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, prescribed_medicationCreateArgs<ExtArgs>>
    ): Prisma__prescribed_medicationClient<$Result.GetResult<Prisma.$prescribed_medicationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Prescribed_medications.
     * @param {prescribed_medicationCreateManyArgs} args - Arguments to create many Prescribed_medications.
     * @example
     * // Create many Prescribed_medications
     * const prescribed_medication = await prisma.prescribed_medication.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends prescribed_medicationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, prescribed_medicationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Prescribed_medications and returns the data saved in the database.
     * @param {prescribed_medicationCreateManyAndReturnArgs} args - Arguments to create many Prescribed_medications.
     * @example
     * // Create many Prescribed_medications
     * const prescribed_medication = await prisma.prescribed_medication.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Prescribed_medications and only return the `medication_id`
     * const prescribed_medicationWithMedication_idOnly = await prisma.prescribed_medication.createManyAndReturn({ 
     *   select: { medication_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends prescribed_medicationCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, prescribed_medicationCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$prescribed_medicationPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Prescribed_medication.
     * @param {prescribed_medicationDeleteArgs} args - Arguments to delete one Prescribed_medication.
     * @example
     * // Delete one Prescribed_medication
     * const Prescribed_medication = await prisma.prescribed_medication.delete({
     *   where: {
     *     // ... filter to delete one Prescribed_medication
     *   }
     * })
     * 
    **/
    delete<T extends prescribed_medicationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, prescribed_medicationDeleteArgs<ExtArgs>>
    ): Prisma__prescribed_medicationClient<$Result.GetResult<Prisma.$prescribed_medicationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Prescribed_medication.
     * @param {prescribed_medicationUpdateArgs} args - Arguments to update one Prescribed_medication.
     * @example
     * // Update one Prescribed_medication
     * const prescribed_medication = await prisma.prescribed_medication.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends prescribed_medicationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, prescribed_medicationUpdateArgs<ExtArgs>>
    ): Prisma__prescribed_medicationClient<$Result.GetResult<Prisma.$prescribed_medicationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Prescribed_medications.
     * @param {prescribed_medicationDeleteManyArgs} args - Arguments to filter Prescribed_medications to delete.
     * @example
     * // Delete a few Prescribed_medications
     * const { count } = await prisma.prescribed_medication.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends prescribed_medicationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, prescribed_medicationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Prescribed_medications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prescribed_medicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Prescribed_medications
     * const prescribed_medication = await prisma.prescribed_medication.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends prescribed_medicationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, prescribed_medicationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Prescribed_medication.
     * @param {prescribed_medicationUpsertArgs} args - Arguments to update or create a Prescribed_medication.
     * @example
     * // Update or create a Prescribed_medication
     * const prescribed_medication = await prisma.prescribed_medication.upsert({
     *   create: {
     *     // ... data to create a Prescribed_medication
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Prescribed_medication we want to update
     *   }
     * })
    **/
    upsert<T extends prescribed_medicationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, prescribed_medicationUpsertArgs<ExtArgs>>
    ): Prisma__prescribed_medicationClient<$Result.GetResult<Prisma.$prescribed_medicationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Prescribed_medications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prescribed_medicationCountArgs} args - Arguments to filter Prescribed_medications to count.
     * @example
     * // Count the number of Prescribed_medications
     * const count = await prisma.prescribed_medication.count({
     *   where: {
     *     // ... the filter for the Prescribed_medications we want to count
     *   }
     * })
    **/
    count<T extends prescribed_medicationCountArgs>(
      args?: Subset<T, prescribed_medicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Prescribed_medicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Prescribed_medication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Prescribed_medicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Prescribed_medicationAggregateArgs>(args: Subset<T, Prescribed_medicationAggregateArgs>): Prisma.PrismaPromise<GetPrescribed_medicationAggregateType<T>>

    /**
     * Group by Prescribed_medication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prescribed_medicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends prescribed_medicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: prescribed_medicationGroupByArgs['orderBy'] }
        : { orderBy?: prescribed_medicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, prescribed_medicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrescribed_medicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the prescribed_medication model
   */
  readonly fields: prescribed_medicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for prescribed_medication.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__prescribed_medicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    medication<T extends medicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, medicationDefaultArgs<ExtArgs>>): Prisma__medicationClient<$Result.GetResult<Prisma.$medicationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    patient<T extends patientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, patientDefaultArgs<ExtArgs>>): Prisma__patientClient<$Result.GetResult<Prisma.$patientPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    prescribing_physician<T extends doctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, doctorDefaultArgs<ExtArgs>>): Prisma__doctorClient<$Result.GetResult<Prisma.$doctorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the prescribed_medication model
   */ 
  interface prescribed_medicationFieldRefs {
    readonly medication_id: FieldRef<"prescribed_medication", 'String'>
    readonly patient_id: FieldRef<"prescribed_medication", 'String'>
    readonly status: FieldRef<"prescribed_medication", 'status'>
    readonly frequency: FieldRef<"prescribed_medication", 'String'>
    readonly doctor_id: FieldRef<"prescribed_medication", 'String'>
    readonly start_date: FieldRef<"prescribed_medication", 'DateTime'>
    readonly end_date: FieldRef<"prescribed_medication", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * prescribed_medication findUnique
   */
  export type prescribed_medicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescribed_medication
     */
    select?: prescribed_medicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescribed_medicationInclude<ExtArgs> | null
    /**
     * Filter, which prescribed_medication to fetch.
     */
    where: prescribed_medicationWhereUniqueInput
  }

  /**
   * prescribed_medication findUniqueOrThrow
   */
  export type prescribed_medicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescribed_medication
     */
    select?: prescribed_medicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescribed_medicationInclude<ExtArgs> | null
    /**
     * Filter, which prescribed_medication to fetch.
     */
    where: prescribed_medicationWhereUniqueInput
  }

  /**
   * prescribed_medication findFirst
   */
  export type prescribed_medicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescribed_medication
     */
    select?: prescribed_medicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescribed_medicationInclude<ExtArgs> | null
    /**
     * Filter, which prescribed_medication to fetch.
     */
    where?: prescribed_medicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of prescribed_medications to fetch.
     */
    orderBy?: prescribed_medicationOrderByWithRelationInput | prescribed_medicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for prescribed_medications.
     */
    cursor?: prescribed_medicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` prescribed_medications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` prescribed_medications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of prescribed_medications.
     */
    distinct?: Prescribed_medicationScalarFieldEnum | Prescribed_medicationScalarFieldEnum[]
  }

  /**
   * prescribed_medication findFirstOrThrow
   */
  export type prescribed_medicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescribed_medication
     */
    select?: prescribed_medicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescribed_medicationInclude<ExtArgs> | null
    /**
     * Filter, which prescribed_medication to fetch.
     */
    where?: prescribed_medicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of prescribed_medications to fetch.
     */
    orderBy?: prescribed_medicationOrderByWithRelationInput | prescribed_medicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for prescribed_medications.
     */
    cursor?: prescribed_medicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` prescribed_medications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` prescribed_medications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of prescribed_medications.
     */
    distinct?: Prescribed_medicationScalarFieldEnum | Prescribed_medicationScalarFieldEnum[]
  }

  /**
   * prescribed_medication findMany
   */
  export type prescribed_medicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescribed_medication
     */
    select?: prescribed_medicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescribed_medicationInclude<ExtArgs> | null
    /**
     * Filter, which prescribed_medications to fetch.
     */
    where?: prescribed_medicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of prescribed_medications to fetch.
     */
    orderBy?: prescribed_medicationOrderByWithRelationInput | prescribed_medicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing prescribed_medications.
     */
    cursor?: prescribed_medicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` prescribed_medications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` prescribed_medications.
     */
    skip?: number
    distinct?: Prescribed_medicationScalarFieldEnum | Prescribed_medicationScalarFieldEnum[]
  }

  /**
   * prescribed_medication create
   */
  export type prescribed_medicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescribed_medication
     */
    select?: prescribed_medicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescribed_medicationInclude<ExtArgs> | null
    /**
     * The data needed to create a prescribed_medication.
     */
    data: XOR<prescribed_medicationCreateInput, prescribed_medicationUncheckedCreateInput>
  }

  /**
   * prescribed_medication createMany
   */
  export type prescribed_medicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many prescribed_medications.
     */
    data: prescribed_medicationCreateManyInput | prescribed_medicationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * prescribed_medication createManyAndReturn
   */
  export type prescribed_medicationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescribed_medication
     */
    select?: prescribed_medicationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many prescribed_medications.
     */
    data: prescribed_medicationCreateManyInput | prescribed_medicationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescribed_medicationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * prescribed_medication update
   */
  export type prescribed_medicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescribed_medication
     */
    select?: prescribed_medicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescribed_medicationInclude<ExtArgs> | null
    /**
     * The data needed to update a prescribed_medication.
     */
    data: XOR<prescribed_medicationUpdateInput, prescribed_medicationUncheckedUpdateInput>
    /**
     * Choose, which prescribed_medication to update.
     */
    where: prescribed_medicationWhereUniqueInput
  }

  /**
   * prescribed_medication updateMany
   */
  export type prescribed_medicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update prescribed_medications.
     */
    data: XOR<prescribed_medicationUpdateManyMutationInput, prescribed_medicationUncheckedUpdateManyInput>
    /**
     * Filter which prescribed_medications to update
     */
    where?: prescribed_medicationWhereInput
  }

  /**
   * prescribed_medication upsert
   */
  export type prescribed_medicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescribed_medication
     */
    select?: prescribed_medicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescribed_medicationInclude<ExtArgs> | null
    /**
     * The filter to search for the prescribed_medication to update in case it exists.
     */
    where: prescribed_medicationWhereUniqueInput
    /**
     * In case the prescribed_medication found by the `where` argument doesn't exist, create a new prescribed_medication with this data.
     */
    create: XOR<prescribed_medicationCreateInput, prescribed_medicationUncheckedCreateInput>
    /**
     * In case the prescribed_medication was found with the provided `where` argument, update it with this data.
     */
    update: XOR<prescribed_medicationUpdateInput, prescribed_medicationUncheckedUpdateInput>
  }

  /**
   * prescribed_medication delete
   */
  export type prescribed_medicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescribed_medication
     */
    select?: prescribed_medicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescribed_medicationInclude<ExtArgs> | null
    /**
     * Filter which prescribed_medication to delete.
     */
    where: prescribed_medicationWhereUniqueInput
  }

  /**
   * prescribed_medication deleteMany
   */
  export type prescribed_medicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which prescribed_medications to delete
     */
    where?: prescribed_medicationWhereInput
  }

  /**
   * prescribed_medication without action
   */
  export type prescribed_medicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescribed_medication
     */
    select?: prescribed_medicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescribed_medicationInclude<ExtArgs> | null
  }


  /**
   * Model medication
   */

  export type AggregateMedication = {
    _count: MedicationCountAggregateOutputType | null
    _min: MedicationMinAggregateOutputType | null
    _max: MedicationMaxAggregateOutputType | null
  }

  export type MedicationMinAggregateOutputType = {
    medication_id: string | null
    medication_name: string | null
  }

  export type MedicationMaxAggregateOutputType = {
    medication_id: string | null
    medication_name: string | null
  }

  export type MedicationCountAggregateOutputType = {
    medication_id: number
    medication_name: number
    _all: number
  }


  export type MedicationMinAggregateInputType = {
    medication_id?: true
    medication_name?: true
  }

  export type MedicationMaxAggregateInputType = {
    medication_id?: true
    medication_name?: true
  }

  export type MedicationCountAggregateInputType = {
    medication_id?: true
    medication_name?: true
    _all?: true
  }

  export type MedicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which medication to aggregate.
     */
    where?: medicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of medications to fetch.
     */
    orderBy?: medicationOrderByWithRelationInput | medicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: medicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` medications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` medications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned medications
    **/
    _count?: true | MedicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedicationMaxAggregateInputType
  }

  export type GetMedicationAggregateType<T extends MedicationAggregateArgs> = {
        [P in keyof T & keyof AggregateMedication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedication[P]>
      : GetScalarType<T[P], AggregateMedication[P]>
  }




  export type medicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: medicationWhereInput
    orderBy?: medicationOrderByWithAggregationInput | medicationOrderByWithAggregationInput[]
    by: MedicationScalarFieldEnum[] | MedicationScalarFieldEnum
    having?: medicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedicationCountAggregateInputType | true
    _min?: MedicationMinAggregateInputType
    _max?: MedicationMaxAggregateInputType
  }

  export type MedicationGroupByOutputType = {
    medication_id: string
    medication_name: string
    _count: MedicationCountAggregateOutputType | null
    _min: MedicationMinAggregateOutputType | null
    _max: MedicationMaxAggregateOutputType | null
  }

  type GetMedicationGroupByPayload<T extends medicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MedicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedicationGroupByOutputType[P]>
            : GetScalarType<T[P], MedicationGroupByOutputType[P]>
        }
      >
    >


  export type medicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    medication_id?: boolean
    medication_name?: boolean
    prescribed?: boolean | medication$prescribedArgs<ExtArgs>
    _count?: boolean | MedicationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medication"]>

  export type medicationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    medication_id?: boolean
    medication_name?: boolean
  }, ExtArgs["result"]["medication"]>

  export type medicationSelectScalar = {
    medication_id?: boolean
    medication_name?: boolean
  }

  export type medicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    prescribed?: boolean | medication$prescribedArgs<ExtArgs>
    _count?: boolean | MedicationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type medicationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $medicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "medication"
    objects: {
      prescribed: Prisma.$prescribed_medicationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      medication_id: string
      medication_name: string
    }, ExtArgs["result"]["medication"]>
    composites: {}
  }

  type medicationGetPayload<S extends boolean | null | undefined | medicationDefaultArgs> = $Result.GetResult<Prisma.$medicationPayload, S>

  type medicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<medicationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MedicationCountAggregateInputType | true
    }

  export interface medicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['medication'], meta: { name: 'medication' } }
    /**
     * Find zero or one Medication that matches the filter.
     * @param {medicationFindUniqueArgs} args - Arguments to find a Medication
     * @example
     * // Get one Medication
     * const medication = await prisma.medication.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends medicationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, medicationFindUniqueArgs<ExtArgs>>
    ): Prisma__medicationClient<$Result.GetResult<Prisma.$medicationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Medication that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {medicationFindUniqueOrThrowArgs} args - Arguments to find a Medication
     * @example
     * // Get one Medication
     * const medication = await prisma.medication.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends medicationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, medicationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__medicationClient<$Result.GetResult<Prisma.$medicationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Medication that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {medicationFindFirstArgs} args - Arguments to find a Medication
     * @example
     * // Get one Medication
     * const medication = await prisma.medication.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends medicationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, medicationFindFirstArgs<ExtArgs>>
    ): Prisma__medicationClient<$Result.GetResult<Prisma.$medicationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Medication that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {medicationFindFirstOrThrowArgs} args - Arguments to find a Medication
     * @example
     * // Get one Medication
     * const medication = await prisma.medication.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends medicationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, medicationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__medicationClient<$Result.GetResult<Prisma.$medicationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Medications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {medicationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Medications
     * const medications = await prisma.medication.findMany()
     * 
     * // Get first 10 Medications
     * const medications = await prisma.medication.findMany({ take: 10 })
     * 
     * // Only select the `medication_id`
     * const medicationWithMedication_idOnly = await prisma.medication.findMany({ select: { medication_id: true } })
     * 
    **/
    findMany<T extends medicationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, medicationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$medicationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Medication.
     * @param {medicationCreateArgs} args - Arguments to create a Medication.
     * @example
     * // Create one Medication
     * const Medication = await prisma.medication.create({
     *   data: {
     *     // ... data to create a Medication
     *   }
     * })
     * 
    **/
    create<T extends medicationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, medicationCreateArgs<ExtArgs>>
    ): Prisma__medicationClient<$Result.GetResult<Prisma.$medicationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Medications.
     * @param {medicationCreateManyArgs} args - Arguments to create many Medications.
     * @example
     * // Create many Medications
     * const medication = await prisma.medication.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends medicationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, medicationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Medications and returns the data saved in the database.
     * @param {medicationCreateManyAndReturnArgs} args - Arguments to create many Medications.
     * @example
     * // Create many Medications
     * const medication = await prisma.medication.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Medications and only return the `medication_id`
     * const medicationWithMedication_idOnly = await prisma.medication.createManyAndReturn({ 
     *   select: { medication_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends medicationCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, medicationCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$medicationPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Medication.
     * @param {medicationDeleteArgs} args - Arguments to delete one Medication.
     * @example
     * // Delete one Medication
     * const Medication = await prisma.medication.delete({
     *   where: {
     *     // ... filter to delete one Medication
     *   }
     * })
     * 
    **/
    delete<T extends medicationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, medicationDeleteArgs<ExtArgs>>
    ): Prisma__medicationClient<$Result.GetResult<Prisma.$medicationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Medication.
     * @param {medicationUpdateArgs} args - Arguments to update one Medication.
     * @example
     * // Update one Medication
     * const medication = await prisma.medication.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends medicationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, medicationUpdateArgs<ExtArgs>>
    ): Prisma__medicationClient<$Result.GetResult<Prisma.$medicationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Medications.
     * @param {medicationDeleteManyArgs} args - Arguments to filter Medications to delete.
     * @example
     * // Delete a few Medications
     * const { count } = await prisma.medication.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends medicationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, medicationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Medications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {medicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Medications
     * const medication = await prisma.medication.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends medicationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, medicationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Medication.
     * @param {medicationUpsertArgs} args - Arguments to update or create a Medication.
     * @example
     * // Update or create a Medication
     * const medication = await prisma.medication.upsert({
     *   create: {
     *     // ... data to create a Medication
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Medication we want to update
     *   }
     * })
    **/
    upsert<T extends medicationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, medicationUpsertArgs<ExtArgs>>
    ): Prisma__medicationClient<$Result.GetResult<Prisma.$medicationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Medications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {medicationCountArgs} args - Arguments to filter Medications to count.
     * @example
     * // Count the number of Medications
     * const count = await prisma.medication.count({
     *   where: {
     *     // ... the filter for the Medications we want to count
     *   }
     * })
    **/
    count<T extends medicationCountArgs>(
      args?: Subset<T, medicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Medication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedicationAggregateArgs>(args: Subset<T, MedicationAggregateArgs>): Prisma.PrismaPromise<GetMedicationAggregateType<T>>

    /**
     * Group by Medication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {medicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends medicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: medicationGroupByArgs['orderBy'] }
        : { orderBy?: medicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, medicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the medication model
   */
  readonly fields: medicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for medication.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__medicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    prescribed<T extends medication$prescribedArgs<ExtArgs> = {}>(args?: Subset<T, medication$prescribedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$prescribed_medicationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the medication model
   */ 
  interface medicationFieldRefs {
    readonly medication_id: FieldRef<"medication", 'String'>
    readonly medication_name: FieldRef<"medication", 'String'>
  }
    

  // Custom InputTypes
  /**
   * medication findUnique
   */
  export type medicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the medication
     */
    select?: medicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: medicationInclude<ExtArgs> | null
    /**
     * Filter, which medication to fetch.
     */
    where: medicationWhereUniqueInput
  }

  /**
   * medication findUniqueOrThrow
   */
  export type medicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the medication
     */
    select?: medicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: medicationInclude<ExtArgs> | null
    /**
     * Filter, which medication to fetch.
     */
    where: medicationWhereUniqueInput
  }

  /**
   * medication findFirst
   */
  export type medicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the medication
     */
    select?: medicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: medicationInclude<ExtArgs> | null
    /**
     * Filter, which medication to fetch.
     */
    where?: medicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of medications to fetch.
     */
    orderBy?: medicationOrderByWithRelationInput | medicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for medications.
     */
    cursor?: medicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` medications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` medications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of medications.
     */
    distinct?: MedicationScalarFieldEnum | MedicationScalarFieldEnum[]
  }

  /**
   * medication findFirstOrThrow
   */
  export type medicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the medication
     */
    select?: medicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: medicationInclude<ExtArgs> | null
    /**
     * Filter, which medication to fetch.
     */
    where?: medicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of medications to fetch.
     */
    orderBy?: medicationOrderByWithRelationInput | medicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for medications.
     */
    cursor?: medicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` medications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` medications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of medications.
     */
    distinct?: MedicationScalarFieldEnum | MedicationScalarFieldEnum[]
  }

  /**
   * medication findMany
   */
  export type medicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the medication
     */
    select?: medicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: medicationInclude<ExtArgs> | null
    /**
     * Filter, which medications to fetch.
     */
    where?: medicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of medications to fetch.
     */
    orderBy?: medicationOrderByWithRelationInput | medicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing medications.
     */
    cursor?: medicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` medications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` medications.
     */
    skip?: number
    distinct?: MedicationScalarFieldEnum | MedicationScalarFieldEnum[]
  }

  /**
   * medication create
   */
  export type medicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the medication
     */
    select?: medicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: medicationInclude<ExtArgs> | null
    /**
     * The data needed to create a medication.
     */
    data: XOR<medicationCreateInput, medicationUncheckedCreateInput>
  }

  /**
   * medication createMany
   */
  export type medicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many medications.
     */
    data: medicationCreateManyInput | medicationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * medication createManyAndReturn
   */
  export type medicationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the medication
     */
    select?: medicationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many medications.
     */
    data: medicationCreateManyInput | medicationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * medication update
   */
  export type medicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the medication
     */
    select?: medicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: medicationInclude<ExtArgs> | null
    /**
     * The data needed to update a medication.
     */
    data: XOR<medicationUpdateInput, medicationUncheckedUpdateInput>
    /**
     * Choose, which medication to update.
     */
    where: medicationWhereUniqueInput
  }

  /**
   * medication updateMany
   */
  export type medicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update medications.
     */
    data: XOR<medicationUpdateManyMutationInput, medicationUncheckedUpdateManyInput>
    /**
     * Filter which medications to update
     */
    where?: medicationWhereInput
  }

  /**
   * medication upsert
   */
  export type medicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the medication
     */
    select?: medicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: medicationInclude<ExtArgs> | null
    /**
     * The filter to search for the medication to update in case it exists.
     */
    where: medicationWhereUniqueInput
    /**
     * In case the medication found by the `where` argument doesn't exist, create a new medication with this data.
     */
    create: XOR<medicationCreateInput, medicationUncheckedCreateInput>
    /**
     * In case the medication was found with the provided `where` argument, update it with this data.
     */
    update: XOR<medicationUpdateInput, medicationUncheckedUpdateInput>
  }

  /**
   * medication delete
   */
  export type medicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the medication
     */
    select?: medicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: medicationInclude<ExtArgs> | null
    /**
     * Filter which medication to delete.
     */
    where: medicationWhereUniqueInput
  }

  /**
   * medication deleteMany
   */
  export type medicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which medications to delete
     */
    where?: medicationWhereInput
  }

  /**
   * medication.prescribed
   */
  export type medication$prescribedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescribed_medication
     */
    select?: prescribed_medicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescribed_medicationInclude<ExtArgs> | null
    where?: prescribed_medicationWhereInput
    orderBy?: prescribed_medicationOrderByWithRelationInput | prescribed_medicationOrderByWithRelationInput[]
    cursor?: prescribed_medicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Prescribed_medicationScalarFieldEnum | Prescribed_medicationScalarFieldEnum[]
  }

  /**
   * medication without action
   */
  export type medicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the medication
     */
    select?: medicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: medicationInclude<ExtArgs> | null
  }


  /**
   * Model patient
   */

  export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  export type PatientMinAggregateOutputType = {
    id: string | null
    legal_id: string | null
    dob: Date | null
    sex: $Enums.gender | null
    username: string | null
    password: string | null
    email: string | null
    phone_number: string | null
  }

  export type PatientMaxAggregateOutputType = {
    id: string | null
    legal_id: string | null
    dob: Date | null
    sex: $Enums.gender | null
    username: string | null
    password: string | null
    email: string | null
    phone_number: string | null
  }

  export type PatientCountAggregateOutputType = {
    id: number
    legal_id: number
    dob: number
    sex: number
    username: number
    password: number
    email: number
    phone_number: number
    _all: number
  }


  export type PatientMinAggregateInputType = {
    id?: true
    legal_id?: true
    dob?: true
    sex?: true
    username?: true
    password?: true
    email?: true
    phone_number?: true
  }

  export type PatientMaxAggregateInputType = {
    id?: true
    legal_id?: true
    dob?: true
    sex?: true
    username?: true
    password?: true
    email?: true
    phone_number?: true
  }

  export type PatientCountAggregateInputType = {
    id?: true
    legal_id?: true
    dob?: true
    sex?: true
    username?: true
    password?: true
    email?: true
    phone_number?: true
    _all?: true
  }

  export type PatientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which patient to aggregate.
     */
    where?: patientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patients to fetch.
     */
    orderBy?: patientOrderByWithRelationInput | patientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: patientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned patients
    **/
    _count?: true | PatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMaxAggregateInputType
  }

  export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
      : GetScalarType<T[P], AggregatePatient[P]>
  }




  export type patientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: patientWhereInput
    orderBy?: patientOrderByWithAggregationInput | patientOrderByWithAggregationInput[]
    by: PatientScalarFieldEnum[] | PatientScalarFieldEnum
    having?: patientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountAggregateInputType | true
    _min?: PatientMinAggregateInputType
    _max?: PatientMaxAggregateInputType
  }

  export type PatientGroupByOutputType = {
    id: string
    legal_id: string
    dob: Date
    sex: $Enums.gender
    username: string
    password: string
    email: string
    phone_number: string
    _count: PatientCountAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  type GetPatientGroupByPayload<T extends patientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientGroupByOutputType[P]>
            : GetScalarType<T[P], PatientGroupByOutputType[P]>
        }
      >
    >


  export type patientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    legal_id?: boolean
    dob?: boolean
    sex?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
    phone_number?: boolean
    history?: boolean | patient$historyArgs<ExtArgs>
    doctors?: boolean | patient$doctorsArgs<ExtArgs>
    medications?: boolean | patient$medicationsArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type patientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    legal_id?: boolean
    dob?: boolean
    sex?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
    phone_number?: boolean
  }, ExtArgs["result"]["patient"]>

  export type patientSelectScalar = {
    id?: boolean
    legal_id?: boolean
    dob?: boolean
    sex?: boolean
    username?: boolean
    password?: boolean
    email?: boolean
    phone_number?: boolean
  }

  export type patientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    history?: boolean | patient$historyArgs<ExtArgs>
    doctors?: boolean | patient$doctorsArgs<ExtArgs>
    medications?: boolean | patient$medicationsArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type patientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $patientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "patient"
    objects: {
      history: Prisma.$medical_historyPayload<ExtArgs> | null
      doctors: Prisma.$doctorPayload<ExtArgs>[]
      medications: Prisma.$prescribed_medicationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      legal_id: string
      dob: Date
      sex: $Enums.gender
      username: string
      password: string
      email: string
      phone_number: string
    }, ExtArgs["result"]["patient"]>
    composites: {}
  }

  type patientGetPayload<S extends boolean | null | undefined | patientDefaultArgs> = $Result.GetResult<Prisma.$patientPayload, S>

  type patientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<patientFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PatientCountAggregateInputType | true
    }

  export interface patientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['patient'], meta: { name: 'patient' } }
    /**
     * Find zero or one Patient that matches the filter.
     * @param {patientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends patientFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, patientFindUniqueArgs<ExtArgs>>
    ): Prisma__patientClient<$Result.GetResult<Prisma.$patientPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Patient that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {patientFindUniqueOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends patientFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, patientFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__patientClient<$Result.GetResult<Prisma.$patientPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends patientFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, patientFindFirstArgs<ExtArgs>>
    ): Prisma__patientClient<$Result.GetResult<Prisma.$patientPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Patient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientFindFirstOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends patientFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, patientFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__patientClient<$Result.GetResult<Prisma.$patientPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientWithIdOnly = await prisma.patient.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends patientFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, patientFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$patientPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Patient.
     * @param {patientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     * 
    **/
    create<T extends patientCreateArgs<ExtArgs>>(
      args: SelectSubset<T, patientCreateArgs<ExtArgs>>
    ): Prisma__patientClient<$Result.GetResult<Prisma.$patientPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Patients.
     * @param {patientCreateManyArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends patientCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, patientCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Patients and returns the data saved in the database.
     * @param {patientCreateManyAndReturnArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Patients and only return the `id`
     * const patientWithIdOnly = await prisma.patient.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends patientCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, patientCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$patientPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Patient.
     * @param {patientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     * 
    **/
    delete<T extends patientDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, patientDeleteArgs<ExtArgs>>
    ): Prisma__patientClient<$Result.GetResult<Prisma.$patientPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Patient.
     * @param {patientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends patientUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, patientUpdateArgs<ExtArgs>>
    ): Prisma__patientClient<$Result.GetResult<Prisma.$patientPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Patients.
     * @param {patientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends patientDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, patientDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends patientUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, patientUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Patient.
     * @param {patientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
    **/
    upsert<T extends patientUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, patientUpsertArgs<ExtArgs>>
    ): Prisma__patientClient<$Result.GetResult<Prisma.$patientPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends patientCountArgs>(
      args?: Subset<T, patientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): Prisma.PrismaPromise<GetPatientAggregateType<T>>

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {patientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends patientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: patientGroupByArgs['orderBy'] }
        : { orderBy?: patientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, patientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the patient model
   */
  readonly fields: patientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for patient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__patientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    history<T extends patient$historyArgs<ExtArgs> = {}>(args?: Subset<T, patient$historyArgs<ExtArgs>>): Prisma__medical_historyClient<$Result.GetResult<Prisma.$medical_historyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    doctors<T extends patient$doctorsArgs<ExtArgs> = {}>(args?: Subset<T, patient$doctorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$doctorPayload<ExtArgs>, T, 'findMany'> | Null>;

    medications<T extends patient$medicationsArgs<ExtArgs> = {}>(args?: Subset<T, patient$medicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$prescribed_medicationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the patient model
   */ 
  interface patientFieldRefs {
    readonly id: FieldRef<"patient", 'String'>
    readonly legal_id: FieldRef<"patient", 'String'>
    readonly dob: FieldRef<"patient", 'DateTime'>
    readonly sex: FieldRef<"patient", 'gender'>
    readonly username: FieldRef<"patient", 'String'>
    readonly password: FieldRef<"patient", 'String'>
    readonly email: FieldRef<"patient", 'String'>
    readonly phone_number: FieldRef<"patient", 'String'>
  }
    

  // Custom InputTypes
  /**
   * patient findUnique
   */
  export type patientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientInclude<ExtArgs> | null
    /**
     * Filter, which patient to fetch.
     */
    where: patientWhereUniqueInput
  }

  /**
   * patient findUniqueOrThrow
   */
  export type patientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientInclude<ExtArgs> | null
    /**
     * Filter, which patient to fetch.
     */
    where: patientWhereUniqueInput
  }

  /**
   * patient findFirst
   */
  export type patientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientInclude<ExtArgs> | null
    /**
     * Filter, which patient to fetch.
     */
    where?: patientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patients to fetch.
     */
    orderBy?: patientOrderByWithRelationInput | patientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for patients.
     */
    cursor?: patientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * patient findFirstOrThrow
   */
  export type patientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientInclude<ExtArgs> | null
    /**
     * Filter, which patient to fetch.
     */
    where?: patientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patients to fetch.
     */
    orderBy?: patientOrderByWithRelationInput | patientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for patients.
     */
    cursor?: patientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * patient findMany
   */
  export type patientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientInclude<ExtArgs> | null
    /**
     * Filter, which patients to fetch.
     */
    where?: patientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of patients to fetch.
     */
    orderBy?: patientOrderByWithRelationInput | patientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing patients.
     */
    cursor?: patientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` patients.
     */
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * patient create
   */
  export type patientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientInclude<ExtArgs> | null
    /**
     * The data needed to create a patient.
     */
    data: XOR<patientCreateInput, patientUncheckedCreateInput>
  }

  /**
   * patient createMany
   */
  export type patientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many patients.
     */
    data: patientCreateManyInput | patientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * patient createManyAndReturn
   */
  export type patientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many patients.
     */
    data: patientCreateManyInput | patientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * patient update
   */
  export type patientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientInclude<ExtArgs> | null
    /**
     * The data needed to update a patient.
     */
    data: XOR<patientUpdateInput, patientUncheckedUpdateInput>
    /**
     * Choose, which patient to update.
     */
    where: patientWhereUniqueInput
  }

  /**
   * patient updateMany
   */
  export type patientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update patients.
     */
    data: XOR<patientUpdateManyMutationInput, patientUncheckedUpdateManyInput>
    /**
     * Filter which patients to update
     */
    where?: patientWhereInput
  }

  /**
   * patient upsert
   */
  export type patientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientInclude<ExtArgs> | null
    /**
     * The filter to search for the patient to update in case it exists.
     */
    where: patientWhereUniqueInput
    /**
     * In case the patient found by the `where` argument doesn't exist, create a new patient with this data.
     */
    create: XOR<patientCreateInput, patientUncheckedCreateInput>
    /**
     * In case the patient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<patientUpdateInput, patientUncheckedUpdateInput>
  }

  /**
   * patient delete
   */
  export type patientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientInclude<ExtArgs> | null
    /**
     * Filter which patient to delete.
     */
    where: patientWhereUniqueInput
  }

  /**
   * patient deleteMany
   */
  export type patientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which patients to delete
     */
    where?: patientWhereInput
  }

  /**
   * patient.history
   */
  export type patient$historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the medical_history
     */
    select?: medical_historySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: medical_historyInclude<ExtArgs> | null
    where?: medical_historyWhereInput
  }

  /**
   * patient.doctors
   */
  export type patient$doctorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor
     */
    select?: doctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctorInclude<ExtArgs> | null
    where?: doctorWhereInput
    orderBy?: doctorOrderByWithRelationInput | doctorOrderByWithRelationInput[]
    cursor?: doctorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * patient.medications
   */
  export type patient$medicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescribed_medication
     */
    select?: prescribed_medicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescribed_medicationInclude<ExtArgs> | null
    where?: prescribed_medicationWhereInput
    orderBy?: prescribed_medicationOrderByWithRelationInput | prescribed_medicationOrderByWithRelationInput[]
    cursor?: prescribed_medicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Prescribed_medicationScalarFieldEnum | Prescribed_medicationScalarFieldEnum[]
  }

  /**
   * patient without action
   */
  export type patientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientInclude<ExtArgs> | null
  }


  /**
   * Model doctor
   */

  export type AggregateDoctor = {
    _count: DoctorCountAggregateOutputType | null
    _min: DoctorMinAggregateOutputType | null
    _max: DoctorMaxAggregateOutputType | null
  }

  export type DoctorMinAggregateOutputType = {
    id: string | null
    department_id: string | null
  }

  export type DoctorMaxAggregateOutputType = {
    id: string | null
    department_id: string | null
  }

  export type DoctorCountAggregateOutputType = {
    id: number
    department_id: number
    _all: number
  }


  export type DoctorMinAggregateInputType = {
    id?: true
    department_id?: true
  }

  export type DoctorMaxAggregateInputType = {
    id?: true
    department_id?: true
  }

  export type DoctorCountAggregateInputType = {
    id?: true
    department_id?: true
    _all?: true
  }

  export type DoctorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which doctor to aggregate.
     */
    where?: doctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctors to fetch.
     */
    orderBy?: doctorOrderByWithRelationInput | doctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: doctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned doctors
    **/
    _count?: true | DoctorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorMaxAggregateInputType
  }

  export type GetDoctorAggregateType<T extends DoctorAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctor[P]>
      : GetScalarType<T[P], AggregateDoctor[P]>
  }




  export type doctorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: doctorWhereInput
    orderBy?: doctorOrderByWithAggregationInput | doctorOrderByWithAggregationInput[]
    by: DoctorScalarFieldEnum[] | DoctorScalarFieldEnum
    having?: doctorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorCountAggregateInputType | true
    _min?: DoctorMinAggregateInputType
    _max?: DoctorMaxAggregateInputType
  }

  export type DoctorGroupByOutputType = {
    id: string
    department_id: string
    _count: DoctorCountAggregateOutputType | null
    _min: DoctorMinAggregateOutputType | null
    _max: DoctorMaxAggregateOutputType | null
  }

  type GetDoctorGroupByPayload<T extends doctorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorGroupByOutputType[P]>
        }
      >
    >


  export type doctorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    department_id?: boolean
    department?: boolean | departmentDefaultArgs<ExtArgs>
    patients?: boolean | doctor$patientsArgs<ExtArgs>
    prescribed_medications?: boolean | doctor$prescribed_medicationsArgs<ExtArgs>
    _count?: boolean | DoctorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctor"]>

  export type doctorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    department_id?: boolean
    department?: boolean | departmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctor"]>

  export type doctorSelectScalar = {
    id?: boolean
    department_id?: boolean
  }

  export type doctorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | departmentDefaultArgs<ExtArgs>
    patients?: boolean | doctor$patientsArgs<ExtArgs>
    prescribed_medications?: boolean | doctor$prescribed_medicationsArgs<ExtArgs>
    _count?: boolean | DoctorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type doctorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | departmentDefaultArgs<ExtArgs>
  }

  export type $doctorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "doctor"
    objects: {
      department: Prisma.$departmentPayload<ExtArgs>
      patients: Prisma.$patientPayload<ExtArgs>[]
      prescribed_medications: Prisma.$prescribed_medicationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      department_id: string
    }, ExtArgs["result"]["doctor"]>
    composites: {}
  }

  type doctorGetPayload<S extends boolean | null | undefined | doctorDefaultArgs> = $Result.GetResult<Prisma.$doctorPayload, S>

  type doctorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<doctorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DoctorCountAggregateInputType | true
    }

  export interface doctorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['doctor'], meta: { name: 'doctor' } }
    /**
     * Find zero or one Doctor that matches the filter.
     * @param {doctorFindUniqueArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends doctorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, doctorFindUniqueArgs<ExtArgs>>
    ): Prisma__doctorClient<$Result.GetResult<Prisma.$doctorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Doctor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {doctorFindUniqueOrThrowArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends doctorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, doctorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__doctorClient<$Result.GetResult<Prisma.$doctorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Doctor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctorFindFirstArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends doctorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, doctorFindFirstArgs<ExtArgs>>
    ): Prisma__doctorClient<$Result.GetResult<Prisma.$doctorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Doctor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctorFindFirstOrThrowArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends doctorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, doctorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__doctorClient<$Result.GetResult<Prisma.$doctorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Doctors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doctors
     * const doctors = await prisma.doctor.findMany()
     * 
     * // Get first 10 Doctors
     * const doctors = await prisma.doctor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorWithIdOnly = await prisma.doctor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends doctorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, doctorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$doctorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Doctor.
     * @param {doctorCreateArgs} args - Arguments to create a Doctor.
     * @example
     * // Create one Doctor
     * const Doctor = await prisma.doctor.create({
     *   data: {
     *     // ... data to create a Doctor
     *   }
     * })
     * 
    **/
    create<T extends doctorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, doctorCreateArgs<ExtArgs>>
    ): Prisma__doctorClient<$Result.GetResult<Prisma.$doctorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Doctors.
     * @param {doctorCreateManyArgs} args - Arguments to create many Doctors.
     * @example
     * // Create many Doctors
     * const doctor = await prisma.doctor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends doctorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, doctorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Doctors and returns the data saved in the database.
     * @param {doctorCreateManyAndReturnArgs} args - Arguments to create many Doctors.
     * @example
     * // Create many Doctors
     * const doctor = await prisma.doctor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Doctors and only return the `id`
     * const doctorWithIdOnly = await prisma.doctor.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends doctorCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, doctorCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$doctorPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Doctor.
     * @param {doctorDeleteArgs} args - Arguments to delete one Doctor.
     * @example
     * // Delete one Doctor
     * const Doctor = await prisma.doctor.delete({
     *   where: {
     *     // ... filter to delete one Doctor
     *   }
     * })
     * 
    **/
    delete<T extends doctorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, doctorDeleteArgs<ExtArgs>>
    ): Prisma__doctorClient<$Result.GetResult<Prisma.$doctorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Doctor.
     * @param {doctorUpdateArgs} args - Arguments to update one Doctor.
     * @example
     * // Update one Doctor
     * const doctor = await prisma.doctor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends doctorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, doctorUpdateArgs<ExtArgs>>
    ): Prisma__doctorClient<$Result.GetResult<Prisma.$doctorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Doctors.
     * @param {doctorDeleteManyArgs} args - Arguments to filter Doctors to delete.
     * @example
     * // Delete a few Doctors
     * const { count } = await prisma.doctor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends doctorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, doctorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doctors
     * const doctor = await prisma.doctor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends doctorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, doctorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Doctor.
     * @param {doctorUpsertArgs} args - Arguments to update or create a Doctor.
     * @example
     * // Update or create a Doctor
     * const doctor = await prisma.doctor.upsert({
     *   create: {
     *     // ... data to create a Doctor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doctor we want to update
     *   }
     * })
    **/
    upsert<T extends doctorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, doctorUpsertArgs<ExtArgs>>
    ): Prisma__doctorClient<$Result.GetResult<Prisma.$doctorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctorCountArgs} args - Arguments to filter Doctors to count.
     * @example
     * // Count the number of Doctors
     * const count = await prisma.doctor.count({
     *   where: {
     *     // ... the filter for the Doctors we want to count
     *   }
     * })
    **/
    count<T extends doctorCountArgs>(
      args?: Subset<T, doctorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorAggregateArgs>(args: Subset<T, DoctorAggregateArgs>): Prisma.PrismaPromise<GetDoctorAggregateType<T>>

    /**
     * Group by Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {doctorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends doctorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: doctorGroupByArgs['orderBy'] }
        : { orderBy?: doctorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, doctorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the doctor model
   */
  readonly fields: doctorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for doctor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__doctorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    department<T extends departmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, departmentDefaultArgs<ExtArgs>>): Prisma__departmentClient<$Result.GetResult<Prisma.$departmentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    patients<T extends doctor$patientsArgs<ExtArgs> = {}>(args?: Subset<T, doctor$patientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$patientPayload<ExtArgs>, T, 'findMany'> | Null>;

    prescribed_medications<T extends doctor$prescribed_medicationsArgs<ExtArgs> = {}>(args?: Subset<T, doctor$prescribed_medicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$prescribed_medicationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the doctor model
   */ 
  interface doctorFieldRefs {
    readonly id: FieldRef<"doctor", 'String'>
    readonly department_id: FieldRef<"doctor", 'String'>
  }
    

  // Custom InputTypes
  /**
   * doctor findUnique
   */
  export type doctorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor
     */
    select?: doctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctorInclude<ExtArgs> | null
    /**
     * Filter, which doctor to fetch.
     */
    where: doctorWhereUniqueInput
  }

  /**
   * doctor findUniqueOrThrow
   */
  export type doctorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor
     */
    select?: doctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctorInclude<ExtArgs> | null
    /**
     * Filter, which doctor to fetch.
     */
    where: doctorWhereUniqueInput
  }

  /**
   * doctor findFirst
   */
  export type doctorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor
     */
    select?: doctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctorInclude<ExtArgs> | null
    /**
     * Filter, which doctor to fetch.
     */
    where?: doctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctors to fetch.
     */
    orderBy?: doctorOrderByWithRelationInput | doctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for doctors.
     */
    cursor?: doctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of doctors.
     */
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * doctor findFirstOrThrow
   */
  export type doctorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor
     */
    select?: doctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctorInclude<ExtArgs> | null
    /**
     * Filter, which doctor to fetch.
     */
    where?: doctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctors to fetch.
     */
    orderBy?: doctorOrderByWithRelationInput | doctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for doctors.
     */
    cursor?: doctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of doctors.
     */
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * doctor findMany
   */
  export type doctorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor
     */
    select?: doctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctorInclude<ExtArgs> | null
    /**
     * Filter, which doctors to fetch.
     */
    where?: doctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of doctors to fetch.
     */
    orderBy?: doctorOrderByWithRelationInput | doctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing doctors.
     */
    cursor?: doctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` doctors.
     */
    skip?: number
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * doctor create
   */
  export type doctorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor
     */
    select?: doctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctorInclude<ExtArgs> | null
    /**
     * The data needed to create a doctor.
     */
    data: XOR<doctorCreateInput, doctorUncheckedCreateInput>
  }

  /**
   * doctor createMany
   */
  export type doctorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many doctors.
     */
    data: doctorCreateManyInput | doctorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * doctor createManyAndReturn
   */
  export type doctorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor
     */
    select?: doctorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many doctors.
     */
    data: doctorCreateManyInput | doctorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * doctor update
   */
  export type doctorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor
     */
    select?: doctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctorInclude<ExtArgs> | null
    /**
     * The data needed to update a doctor.
     */
    data: XOR<doctorUpdateInput, doctorUncheckedUpdateInput>
    /**
     * Choose, which doctor to update.
     */
    where: doctorWhereUniqueInput
  }

  /**
   * doctor updateMany
   */
  export type doctorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update doctors.
     */
    data: XOR<doctorUpdateManyMutationInput, doctorUncheckedUpdateManyInput>
    /**
     * Filter which doctors to update
     */
    where?: doctorWhereInput
  }

  /**
   * doctor upsert
   */
  export type doctorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor
     */
    select?: doctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctorInclude<ExtArgs> | null
    /**
     * The filter to search for the doctor to update in case it exists.
     */
    where: doctorWhereUniqueInput
    /**
     * In case the doctor found by the `where` argument doesn't exist, create a new doctor with this data.
     */
    create: XOR<doctorCreateInput, doctorUncheckedCreateInput>
    /**
     * In case the doctor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<doctorUpdateInput, doctorUncheckedUpdateInput>
  }

  /**
   * doctor delete
   */
  export type doctorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor
     */
    select?: doctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctorInclude<ExtArgs> | null
    /**
     * Filter which doctor to delete.
     */
    where: doctorWhereUniqueInput
  }

  /**
   * doctor deleteMany
   */
  export type doctorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which doctors to delete
     */
    where?: doctorWhereInput
  }

  /**
   * doctor.patients
   */
  export type doctor$patientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the patient
     */
    select?: patientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: patientInclude<ExtArgs> | null
    where?: patientWhereInput
    orderBy?: patientOrderByWithRelationInput | patientOrderByWithRelationInput[]
    cursor?: patientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * doctor.prescribed_medications
   */
  export type doctor$prescribed_medicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the prescribed_medication
     */
    select?: prescribed_medicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: prescribed_medicationInclude<ExtArgs> | null
    where?: prescribed_medicationWhereInput
    orderBy?: prescribed_medicationOrderByWithRelationInput | prescribed_medicationOrderByWithRelationInput[]
    cursor?: prescribed_medicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Prescribed_medicationScalarFieldEnum | Prescribed_medicationScalarFieldEnum[]
  }

  /**
   * doctor without action
   */
  export type doctorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor
     */
    select?: doctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctorInclude<ExtArgs> | null
  }


  /**
   * Model department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentMinAggregateOutputType = {
    department_id: string | null
    department_name: string | null
  }

  export type DepartmentMaxAggregateOutputType = {
    department_id: string | null
    department_name: string | null
  }

  export type DepartmentCountAggregateOutputType = {
    department_id: number
    department_name: number
    _all: number
  }


  export type DepartmentMinAggregateInputType = {
    department_id?: true
    department_name?: true
  }

  export type DepartmentMaxAggregateInputType = {
    department_id?: true
    department_name?: true
  }

  export type DepartmentCountAggregateInputType = {
    department_id?: true
    department_name?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which department to aggregate.
     */
    where?: departmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of departments to fetch.
     */
    orderBy?: departmentOrderByWithRelationInput | departmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: departmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type departmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: departmentWhereInput
    orderBy?: departmentOrderByWithAggregationInput | departmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: departmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    department_id: string
    department_name: string
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends departmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type departmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    department_id?: boolean
    department_name?: boolean
    doctors?: boolean | department$doctorsArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type departmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    department_id?: boolean
    department_name?: boolean
  }, ExtArgs["result"]["department"]>

  export type departmentSelectScalar = {
    department_id?: boolean
    department_name?: boolean
  }

  export type departmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    doctors?: boolean | department$doctorsArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type departmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $departmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "department"
    objects: {
      doctors: Prisma.$doctorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      department_id: string
      department_name: string
    }, ExtArgs["result"]["department"]>
    composites: {}
  }

  type departmentGetPayload<S extends boolean | null | undefined | departmentDefaultArgs> = $Result.GetResult<Prisma.$departmentPayload, S>

  type departmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<departmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface departmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['department'], meta: { name: 'department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {departmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends departmentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, departmentFindUniqueArgs<ExtArgs>>
    ): Prisma__departmentClient<$Result.GetResult<Prisma.$departmentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Department that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {departmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends departmentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, departmentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__departmentClient<$Result.GetResult<Prisma.$departmentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {departmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends departmentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, departmentFindFirstArgs<ExtArgs>>
    ): Prisma__departmentClient<$Result.GetResult<Prisma.$departmentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {departmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends departmentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, departmentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__departmentClient<$Result.GetResult<Prisma.$departmentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {departmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `department_id`
     * const departmentWithDepartment_idOnly = await prisma.department.findMany({ select: { department_id: true } })
     * 
    **/
    findMany<T extends departmentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, departmentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$departmentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Department.
     * @param {departmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
    **/
    create<T extends departmentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, departmentCreateArgs<ExtArgs>>
    ): Prisma__departmentClient<$Result.GetResult<Prisma.$departmentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Departments.
     * @param {departmentCreateManyArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends departmentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, departmentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Departments and returns the data saved in the database.
     * @param {departmentCreateManyAndReturnArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Departments and only return the `department_id`
     * const departmentWithDepartment_idOnly = await prisma.department.createManyAndReturn({ 
     *   select: { department_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends departmentCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, departmentCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$departmentPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Department.
     * @param {departmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
    **/
    delete<T extends departmentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, departmentDeleteArgs<ExtArgs>>
    ): Prisma__departmentClient<$Result.GetResult<Prisma.$departmentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Department.
     * @param {departmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends departmentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, departmentUpdateArgs<ExtArgs>>
    ): Prisma__departmentClient<$Result.GetResult<Prisma.$departmentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Departments.
     * @param {departmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends departmentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, departmentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {departmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends departmentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, departmentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Department.
     * @param {departmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
    **/
    upsert<T extends departmentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, departmentUpsertArgs<ExtArgs>>
    ): Prisma__departmentClient<$Result.GetResult<Prisma.$departmentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {departmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends departmentCountArgs>(
      args?: Subset<T, departmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {departmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends departmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: departmentGroupByArgs['orderBy'] }
        : { orderBy?: departmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, departmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the department model
   */
  readonly fields: departmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__departmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    doctors<T extends department$doctorsArgs<ExtArgs> = {}>(args?: Subset<T, department$doctorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$doctorPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the department model
   */ 
  interface departmentFieldRefs {
    readonly department_id: FieldRef<"department", 'String'>
    readonly department_name: FieldRef<"department", 'String'>
  }
    

  // Custom InputTypes
  /**
   * department findUnique
   */
  export type departmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the department
     */
    select?: departmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: departmentInclude<ExtArgs> | null
    /**
     * Filter, which department to fetch.
     */
    where: departmentWhereUniqueInput
  }

  /**
   * department findUniqueOrThrow
   */
  export type departmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the department
     */
    select?: departmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: departmentInclude<ExtArgs> | null
    /**
     * Filter, which department to fetch.
     */
    where: departmentWhereUniqueInput
  }

  /**
   * department findFirst
   */
  export type departmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the department
     */
    select?: departmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: departmentInclude<ExtArgs> | null
    /**
     * Filter, which department to fetch.
     */
    where?: departmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of departments to fetch.
     */
    orderBy?: departmentOrderByWithRelationInput | departmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for departments.
     */
    cursor?: departmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * department findFirstOrThrow
   */
  export type departmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the department
     */
    select?: departmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: departmentInclude<ExtArgs> | null
    /**
     * Filter, which department to fetch.
     */
    where?: departmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of departments to fetch.
     */
    orderBy?: departmentOrderByWithRelationInput | departmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for departments.
     */
    cursor?: departmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * department findMany
   */
  export type departmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the department
     */
    select?: departmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: departmentInclude<ExtArgs> | null
    /**
     * Filter, which departments to fetch.
     */
    where?: departmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of departments to fetch.
     */
    orderBy?: departmentOrderByWithRelationInput | departmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing departments.
     */
    cursor?: departmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * department create
   */
  export type departmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the department
     */
    select?: departmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: departmentInclude<ExtArgs> | null
    /**
     * The data needed to create a department.
     */
    data: XOR<departmentCreateInput, departmentUncheckedCreateInput>
  }

  /**
   * department createMany
   */
  export type departmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many departments.
     */
    data: departmentCreateManyInput | departmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * department createManyAndReturn
   */
  export type departmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the department
     */
    select?: departmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many departments.
     */
    data: departmentCreateManyInput | departmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * department update
   */
  export type departmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the department
     */
    select?: departmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: departmentInclude<ExtArgs> | null
    /**
     * The data needed to update a department.
     */
    data: XOR<departmentUpdateInput, departmentUncheckedUpdateInput>
    /**
     * Choose, which department to update.
     */
    where: departmentWhereUniqueInput
  }

  /**
   * department updateMany
   */
  export type departmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update departments.
     */
    data: XOR<departmentUpdateManyMutationInput, departmentUncheckedUpdateManyInput>
    /**
     * Filter which departments to update
     */
    where?: departmentWhereInput
  }

  /**
   * department upsert
   */
  export type departmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the department
     */
    select?: departmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: departmentInclude<ExtArgs> | null
    /**
     * The filter to search for the department to update in case it exists.
     */
    where: departmentWhereUniqueInput
    /**
     * In case the department found by the `where` argument doesn't exist, create a new department with this data.
     */
    create: XOR<departmentCreateInput, departmentUncheckedCreateInput>
    /**
     * In case the department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<departmentUpdateInput, departmentUncheckedUpdateInput>
  }

  /**
   * department delete
   */
  export type departmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the department
     */
    select?: departmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: departmentInclude<ExtArgs> | null
    /**
     * Filter which department to delete.
     */
    where: departmentWhereUniqueInput
  }

  /**
   * department deleteMany
   */
  export type departmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which departments to delete
     */
    where?: departmentWhereInput
  }

  /**
   * department.doctors
   */
  export type department$doctorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the doctor
     */
    select?: doctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: doctorInclude<ExtArgs> | null
    where?: doctorWhereInput
    orderBy?: doctorOrderByWithRelationInput | doctorOrderByWithRelationInput[]
    cursor?: doctorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }

  /**
   * department without action
   */
  export type departmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the department
     */
    select?: departmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: departmentInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Medical_historyScalarFieldEnum: {
    history_id: 'history_id',
    history_name: 'history_name',
    description: 'description',
    patientId: 'patientId'
  };

  export type Medical_historyScalarFieldEnum = (typeof Medical_historyScalarFieldEnum)[keyof typeof Medical_historyScalarFieldEnum]


  export const DiseaseScalarFieldEnum: {
    disease_id: 'disease_id',
    disease_name: 'disease_name',
    history_id: 'history_id'
  };

  export type DiseaseScalarFieldEnum = (typeof DiseaseScalarFieldEnum)[keyof typeof DiseaseScalarFieldEnum]


  export const MeasurementScalarFieldEnum: {
    measurement_id: 'measurement_id',
    name: 'name',
    owner_id: 'owner_id',
    measaurement_type: 'measaurement_type',
    measurement_value: 'measurement_value',
    measaurement_unit: 'measaurement_unit',
    measurement_on: 'measurement_on',
    created_at: 'created_at'
  };

  export type MeasurementScalarFieldEnum = (typeof MeasurementScalarFieldEnum)[keyof typeof MeasurementScalarFieldEnum]


  export const Prescribed_medicationScalarFieldEnum: {
    medication_id: 'medication_id',
    patient_id: 'patient_id',
    status: 'status',
    frequency: 'frequency',
    doctor_id: 'doctor_id',
    start_date: 'start_date',
    end_date: 'end_date'
  };

  export type Prescribed_medicationScalarFieldEnum = (typeof Prescribed_medicationScalarFieldEnum)[keyof typeof Prescribed_medicationScalarFieldEnum]


  export const MedicationScalarFieldEnum: {
    medication_id: 'medication_id',
    medication_name: 'medication_name'
  };

  export type MedicationScalarFieldEnum = (typeof MedicationScalarFieldEnum)[keyof typeof MedicationScalarFieldEnum]


  export const PatientScalarFieldEnum: {
    id: 'id',
    legal_id: 'legal_id',
    dob: 'dob',
    sex: 'sex',
    username: 'username',
    password: 'password',
    email: 'email',
    phone_number: 'phone_number'
  };

  export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum]


  export const DoctorScalarFieldEnum: {
    id: 'id',
    department_id: 'department_id'
  };

  export type DoctorScalarFieldEnum = (typeof DoctorScalarFieldEnum)[keyof typeof DoctorScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    department_id: 'department_id',
    department_name: 'department_name'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'mesaurement_types'
   */
  export type Enummesaurement_typesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'mesaurement_types'>
    


  /**
   * Reference to a field of type 'mesaurement_types[]'
   */
  export type ListEnummesaurement_typesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'mesaurement_types[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'status'
   */
  export type EnumstatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'status'>
    


  /**
   * Reference to a field of type 'status[]'
   */
  export type ListEnumstatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'status[]'>
    


  /**
   * Reference to a field of type 'gender'
   */
  export type EnumgenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'gender'>
    


  /**
   * Reference to a field of type 'gender[]'
   */
  export type ListEnumgenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'gender[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type medical_historyWhereInput = {
    AND?: medical_historyWhereInput | medical_historyWhereInput[]
    OR?: medical_historyWhereInput[]
    NOT?: medical_historyWhereInput | medical_historyWhereInput[]
    history_id?: StringFilter<"medical_history"> | string
    history_name?: StringFilter<"medical_history"> | string
    description?: StringFilter<"medical_history"> | string
    patientId?: StringFilter<"medical_history"> | string
    disease?: DiseaseListRelationFilter
    patient?: XOR<PatientRelationFilter, patientWhereInput>
  }

  export type medical_historyOrderByWithRelationInput = {
    history_id?: SortOrder
    history_name?: SortOrder
    description?: SortOrder
    patientId?: SortOrder
    disease?: diseaseOrderByRelationAggregateInput
    patient?: patientOrderByWithRelationInput
  }

  export type medical_historyWhereUniqueInput = Prisma.AtLeast<{
    history_id?: string
    patientId?: string
    AND?: medical_historyWhereInput | medical_historyWhereInput[]
    OR?: medical_historyWhereInput[]
    NOT?: medical_historyWhereInput | medical_historyWhereInput[]
    history_name?: StringFilter<"medical_history"> | string
    description?: StringFilter<"medical_history"> | string
    disease?: DiseaseListRelationFilter
    patient?: XOR<PatientRelationFilter, patientWhereInput>
  }, "history_id" | "patientId">

  export type medical_historyOrderByWithAggregationInput = {
    history_id?: SortOrder
    history_name?: SortOrder
    description?: SortOrder
    patientId?: SortOrder
    _count?: medical_historyCountOrderByAggregateInput
    _max?: medical_historyMaxOrderByAggregateInput
    _min?: medical_historyMinOrderByAggregateInput
  }

  export type medical_historyScalarWhereWithAggregatesInput = {
    AND?: medical_historyScalarWhereWithAggregatesInput | medical_historyScalarWhereWithAggregatesInput[]
    OR?: medical_historyScalarWhereWithAggregatesInput[]
    NOT?: medical_historyScalarWhereWithAggregatesInput | medical_historyScalarWhereWithAggregatesInput[]
    history_id?: StringWithAggregatesFilter<"medical_history"> | string
    history_name?: StringWithAggregatesFilter<"medical_history"> | string
    description?: StringWithAggregatesFilter<"medical_history"> | string
    patientId?: StringWithAggregatesFilter<"medical_history"> | string
  }

  export type diseaseWhereInput = {
    AND?: diseaseWhereInput | diseaseWhereInput[]
    OR?: diseaseWhereInput[]
    NOT?: diseaseWhereInput | diseaseWhereInput[]
    disease_id?: StringFilter<"disease"> | string
    disease_name?: StringFilter<"disease"> | string
    history_id?: StringFilter<"disease"> | string
    history?: XOR<Medical_historyRelationFilter, medical_historyWhereInput>
  }

  export type diseaseOrderByWithRelationInput = {
    disease_id?: SortOrder
    disease_name?: SortOrder
    history_id?: SortOrder
    history?: medical_historyOrderByWithRelationInput
  }

  export type diseaseWhereUniqueInput = Prisma.AtLeast<{
    disease_id?: string
    AND?: diseaseWhereInput | diseaseWhereInput[]
    OR?: diseaseWhereInput[]
    NOT?: diseaseWhereInput | diseaseWhereInput[]
    disease_name?: StringFilter<"disease"> | string
    history_id?: StringFilter<"disease"> | string
    history?: XOR<Medical_historyRelationFilter, medical_historyWhereInput>
  }, "disease_id">

  export type diseaseOrderByWithAggregationInput = {
    disease_id?: SortOrder
    disease_name?: SortOrder
    history_id?: SortOrder
    _count?: diseaseCountOrderByAggregateInput
    _max?: diseaseMaxOrderByAggregateInput
    _min?: diseaseMinOrderByAggregateInput
  }

  export type diseaseScalarWhereWithAggregatesInput = {
    AND?: diseaseScalarWhereWithAggregatesInput | diseaseScalarWhereWithAggregatesInput[]
    OR?: diseaseScalarWhereWithAggregatesInput[]
    NOT?: diseaseScalarWhereWithAggregatesInput | diseaseScalarWhereWithAggregatesInput[]
    disease_id?: StringWithAggregatesFilter<"disease"> | string
    disease_name?: StringWithAggregatesFilter<"disease"> | string
    history_id?: StringWithAggregatesFilter<"disease"> | string
  }

  export type measurementWhereInput = {
    AND?: measurementWhereInput | measurementWhereInput[]
    OR?: measurementWhereInput[]
    NOT?: measurementWhereInput | measurementWhereInput[]
    measurement_id?: StringFilter<"measurement"> | string
    name?: StringFilter<"measurement"> | string
    owner_id?: StringFilter<"measurement"> | string
    measaurement_type?: Enummesaurement_typesFilter<"measurement"> | $Enums.mesaurement_types
    measurement_value?: FloatFilter<"measurement"> | number
    measaurement_unit?: StringFilter<"measurement"> | string
    measurement_on?: DateTimeFilter<"measurement"> | Date | string
    created_at?: DateTimeFilter<"measurement"> | Date | string
  }

  export type measurementOrderByWithRelationInput = {
    measurement_id?: SortOrder
    name?: SortOrder
    owner_id?: SortOrder
    measaurement_type?: SortOrder
    measurement_value?: SortOrder
    measaurement_unit?: SortOrder
    measurement_on?: SortOrder
    created_at?: SortOrder
  }

  export type measurementWhereUniqueInput = Prisma.AtLeast<{
    measurement_id?: string
    AND?: measurementWhereInput | measurementWhereInput[]
    OR?: measurementWhereInput[]
    NOT?: measurementWhereInput | measurementWhereInput[]
    name?: StringFilter<"measurement"> | string
    owner_id?: StringFilter<"measurement"> | string
    measaurement_type?: Enummesaurement_typesFilter<"measurement"> | $Enums.mesaurement_types
    measurement_value?: FloatFilter<"measurement"> | number
    measaurement_unit?: StringFilter<"measurement"> | string
    measurement_on?: DateTimeFilter<"measurement"> | Date | string
    created_at?: DateTimeFilter<"measurement"> | Date | string
  }, "measurement_id">

  export type measurementOrderByWithAggregationInput = {
    measurement_id?: SortOrder
    name?: SortOrder
    owner_id?: SortOrder
    measaurement_type?: SortOrder
    measurement_value?: SortOrder
    measaurement_unit?: SortOrder
    measurement_on?: SortOrder
    created_at?: SortOrder
    _count?: measurementCountOrderByAggregateInput
    _avg?: measurementAvgOrderByAggregateInput
    _max?: measurementMaxOrderByAggregateInput
    _min?: measurementMinOrderByAggregateInput
    _sum?: measurementSumOrderByAggregateInput
  }

  export type measurementScalarWhereWithAggregatesInput = {
    AND?: measurementScalarWhereWithAggregatesInput | measurementScalarWhereWithAggregatesInput[]
    OR?: measurementScalarWhereWithAggregatesInput[]
    NOT?: measurementScalarWhereWithAggregatesInput | measurementScalarWhereWithAggregatesInput[]
    measurement_id?: StringWithAggregatesFilter<"measurement"> | string
    name?: StringWithAggregatesFilter<"measurement"> | string
    owner_id?: StringWithAggregatesFilter<"measurement"> | string
    measaurement_type?: Enummesaurement_typesWithAggregatesFilter<"measurement"> | $Enums.mesaurement_types
    measurement_value?: FloatWithAggregatesFilter<"measurement"> | number
    measaurement_unit?: StringWithAggregatesFilter<"measurement"> | string
    measurement_on?: DateTimeWithAggregatesFilter<"measurement"> | Date | string
    created_at?: DateTimeWithAggregatesFilter<"measurement"> | Date | string
  }

  export type prescribed_medicationWhereInput = {
    AND?: prescribed_medicationWhereInput | prescribed_medicationWhereInput[]
    OR?: prescribed_medicationWhereInput[]
    NOT?: prescribed_medicationWhereInput | prescribed_medicationWhereInput[]
    medication_id?: StringFilter<"prescribed_medication"> | string
    patient_id?: StringFilter<"prescribed_medication"> | string
    status?: EnumstatusFilter<"prescribed_medication"> | $Enums.status
    frequency?: StringFilter<"prescribed_medication"> | string
    doctor_id?: StringFilter<"prescribed_medication"> | string
    start_date?: DateTimeFilter<"prescribed_medication"> | Date | string
    end_date?: DateTimeFilter<"prescribed_medication"> | Date | string
    medication?: XOR<MedicationRelationFilter, medicationWhereInput>
    patient?: XOR<PatientRelationFilter, patientWhereInput>
    prescribing_physician?: XOR<DoctorRelationFilter, doctorWhereInput>
  }

  export type prescribed_medicationOrderByWithRelationInput = {
    medication_id?: SortOrder
    patient_id?: SortOrder
    status?: SortOrder
    frequency?: SortOrder
    doctor_id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    medication?: medicationOrderByWithRelationInput
    patient?: patientOrderByWithRelationInput
    prescribing_physician?: doctorOrderByWithRelationInput
  }

  export type prescribed_medicationWhereUniqueInput = Prisma.AtLeast<{
    medication_id_patient_id_start_date?: prescribed_medicationMedication_idPatient_idStart_dateCompoundUniqueInput
    AND?: prescribed_medicationWhereInput | prescribed_medicationWhereInput[]
    OR?: prescribed_medicationWhereInput[]
    NOT?: prescribed_medicationWhereInput | prescribed_medicationWhereInput[]
    medication_id?: StringFilter<"prescribed_medication"> | string
    patient_id?: StringFilter<"prescribed_medication"> | string
    status?: EnumstatusFilter<"prescribed_medication"> | $Enums.status
    frequency?: StringFilter<"prescribed_medication"> | string
    doctor_id?: StringFilter<"prescribed_medication"> | string
    start_date?: DateTimeFilter<"prescribed_medication"> | Date | string
    end_date?: DateTimeFilter<"prescribed_medication"> | Date | string
    medication?: XOR<MedicationRelationFilter, medicationWhereInput>
    patient?: XOR<PatientRelationFilter, patientWhereInput>
    prescribing_physician?: XOR<DoctorRelationFilter, doctorWhereInput>
  }, "medication_id_patient_id_start_date">

  export type prescribed_medicationOrderByWithAggregationInput = {
    medication_id?: SortOrder
    patient_id?: SortOrder
    status?: SortOrder
    frequency?: SortOrder
    doctor_id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    _count?: prescribed_medicationCountOrderByAggregateInput
    _max?: prescribed_medicationMaxOrderByAggregateInput
    _min?: prescribed_medicationMinOrderByAggregateInput
  }

  export type prescribed_medicationScalarWhereWithAggregatesInput = {
    AND?: prescribed_medicationScalarWhereWithAggregatesInput | prescribed_medicationScalarWhereWithAggregatesInput[]
    OR?: prescribed_medicationScalarWhereWithAggregatesInput[]
    NOT?: prescribed_medicationScalarWhereWithAggregatesInput | prescribed_medicationScalarWhereWithAggregatesInput[]
    medication_id?: StringWithAggregatesFilter<"prescribed_medication"> | string
    patient_id?: StringWithAggregatesFilter<"prescribed_medication"> | string
    status?: EnumstatusWithAggregatesFilter<"prescribed_medication"> | $Enums.status
    frequency?: StringWithAggregatesFilter<"prescribed_medication"> | string
    doctor_id?: StringWithAggregatesFilter<"prescribed_medication"> | string
    start_date?: DateTimeWithAggregatesFilter<"prescribed_medication"> | Date | string
    end_date?: DateTimeWithAggregatesFilter<"prescribed_medication"> | Date | string
  }

  export type medicationWhereInput = {
    AND?: medicationWhereInput | medicationWhereInput[]
    OR?: medicationWhereInput[]
    NOT?: medicationWhereInput | medicationWhereInput[]
    medication_id?: StringFilter<"medication"> | string
    medication_name?: StringFilter<"medication"> | string
    prescribed?: Prescribed_medicationListRelationFilter
  }

  export type medicationOrderByWithRelationInput = {
    medication_id?: SortOrder
    medication_name?: SortOrder
    prescribed?: prescribed_medicationOrderByRelationAggregateInput
  }

  export type medicationWhereUniqueInput = Prisma.AtLeast<{
    medication_id?: string
    AND?: medicationWhereInput | medicationWhereInput[]
    OR?: medicationWhereInput[]
    NOT?: medicationWhereInput | medicationWhereInput[]
    medication_name?: StringFilter<"medication"> | string
    prescribed?: Prescribed_medicationListRelationFilter
  }, "medication_id">

  export type medicationOrderByWithAggregationInput = {
    medication_id?: SortOrder
    medication_name?: SortOrder
    _count?: medicationCountOrderByAggregateInput
    _max?: medicationMaxOrderByAggregateInput
    _min?: medicationMinOrderByAggregateInput
  }

  export type medicationScalarWhereWithAggregatesInput = {
    AND?: medicationScalarWhereWithAggregatesInput | medicationScalarWhereWithAggregatesInput[]
    OR?: medicationScalarWhereWithAggregatesInput[]
    NOT?: medicationScalarWhereWithAggregatesInput | medicationScalarWhereWithAggregatesInput[]
    medication_id?: StringWithAggregatesFilter<"medication"> | string
    medication_name?: StringWithAggregatesFilter<"medication"> | string
  }

  export type patientWhereInput = {
    AND?: patientWhereInput | patientWhereInput[]
    OR?: patientWhereInput[]
    NOT?: patientWhereInput | patientWhereInput[]
    id?: StringFilter<"patient"> | string
    legal_id?: StringFilter<"patient"> | string
    dob?: DateTimeFilter<"patient"> | Date | string
    sex?: EnumgenderFilter<"patient"> | $Enums.gender
    username?: StringFilter<"patient"> | string
    password?: StringFilter<"patient"> | string
    email?: StringFilter<"patient"> | string
    phone_number?: StringFilter<"patient"> | string
    history?: XOR<Medical_historyNullableRelationFilter, medical_historyWhereInput> | null
    doctors?: DoctorListRelationFilter
    medications?: Prescribed_medicationListRelationFilter
  }

  export type patientOrderByWithRelationInput = {
    id?: SortOrder
    legal_id?: SortOrder
    dob?: SortOrder
    sex?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    history?: medical_historyOrderByWithRelationInput
    doctors?: doctorOrderByRelationAggregateInput
    medications?: prescribed_medicationOrderByRelationAggregateInput
  }

  export type patientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    legal_id?: string
    username?: string
    email?: string
    phone_number?: string
    AND?: patientWhereInput | patientWhereInput[]
    OR?: patientWhereInput[]
    NOT?: patientWhereInput | patientWhereInput[]
    dob?: DateTimeFilter<"patient"> | Date | string
    sex?: EnumgenderFilter<"patient"> | $Enums.gender
    password?: StringFilter<"patient"> | string
    history?: XOR<Medical_historyNullableRelationFilter, medical_historyWhereInput> | null
    doctors?: DoctorListRelationFilter
    medications?: Prescribed_medicationListRelationFilter
  }, "id" | "legal_id" | "username" | "email" | "phone_number">

  export type patientOrderByWithAggregationInput = {
    id?: SortOrder
    legal_id?: SortOrder
    dob?: SortOrder
    sex?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    _count?: patientCountOrderByAggregateInput
    _max?: patientMaxOrderByAggregateInput
    _min?: patientMinOrderByAggregateInput
  }

  export type patientScalarWhereWithAggregatesInput = {
    AND?: patientScalarWhereWithAggregatesInput | patientScalarWhereWithAggregatesInput[]
    OR?: patientScalarWhereWithAggregatesInput[]
    NOT?: patientScalarWhereWithAggregatesInput | patientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"patient"> | string
    legal_id?: StringWithAggregatesFilter<"patient"> | string
    dob?: DateTimeWithAggregatesFilter<"patient"> | Date | string
    sex?: EnumgenderWithAggregatesFilter<"patient"> | $Enums.gender
    username?: StringWithAggregatesFilter<"patient"> | string
    password?: StringWithAggregatesFilter<"patient"> | string
    email?: StringWithAggregatesFilter<"patient"> | string
    phone_number?: StringWithAggregatesFilter<"patient"> | string
  }

  export type doctorWhereInput = {
    AND?: doctorWhereInput | doctorWhereInput[]
    OR?: doctorWhereInput[]
    NOT?: doctorWhereInput | doctorWhereInput[]
    id?: StringFilter<"doctor"> | string
    department_id?: StringFilter<"doctor"> | string
    department?: XOR<DepartmentRelationFilter, departmentWhereInput>
    patients?: PatientListRelationFilter
    prescribed_medications?: Prescribed_medicationListRelationFilter
  }

  export type doctorOrderByWithRelationInput = {
    id?: SortOrder
    department_id?: SortOrder
    department?: departmentOrderByWithRelationInput
    patients?: patientOrderByRelationAggregateInput
    prescribed_medications?: prescribed_medicationOrderByRelationAggregateInput
  }

  export type doctorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: doctorWhereInput | doctorWhereInput[]
    OR?: doctorWhereInput[]
    NOT?: doctorWhereInput | doctorWhereInput[]
    department_id?: StringFilter<"doctor"> | string
    department?: XOR<DepartmentRelationFilter, departmentWhereInput>
    patients?: PatientListRelationFilter
    prescribed_medications?: Prescribed_medicationListRelationFilter
  }, "id">

  export type doctorOrderByWithAggregationInput = {
    id?: SortOrder
    department_id?: SortOrder
    _count?: doctorCountOrderByAggregateInput
    _max?: doctorMaxOrderByAggregateInput
    _min?: doctorMinOrderByAggregateInput
  }

  export type doctorScalarWhereWithAggregatesInput = {
    AND?: doctorScalarWhereWithAggregatesInput | doctorScalarWhereWithAggregatesInput[]
    OR?: doctorScalarWhereWithAggregatesInput[]
    NOT?: doctorScalarWhereWithAggregatesInput | doctorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"doctor"> | string
    department_id?: StringWithAggregatesFilter<"doctor"> | string
  }

  export type departmentWhereInput = {
    AND?: departmentWhereInput | departmentWhereInput[]
    OR?: departmentWhereInput[]
    NOT?: departmentWhereInput | departmentWhereInput[]
    department_id?: StringFilter<"department"> | string
    department_name?: StringFilter<"department"> | string
    doctors?: DoctorListRelationFilter
  }

  export type departmentOrderByWithRelationInput = {
    department_id?: SortOrder
    department_name?: SortOrder
    doctors?: doctorOrderByRelationAggregateInput
  }

  export type departmentWhereUniqueInput = Prisma.AtLeast<{
    department_id?: string
    AND?: departmentWhereInput | departmentWhereInput[]
    OR?: departmentWhereInput[]
    NOT?: departmentWhereInput | departmentWhereInput[]
    department_name?: StringFilter<"department"> | string
    doctors?: DoctorListRelationFilter
  }, "department_id">

  export type departmentOrderByWithAggregationInput = {
    department_id?: SortOrder
    department_name?: SortOrder
    _count?: departmentCountOrderByAggregateInput
    _max?: departmentMaxOrderByAggregateInput
    _min?: departmentMinOrderByAggregateInput
  }

  export type departmentScalarWhereWithAggregatesInput = {
    AND?: departmentScalarWhereWithAggregatesInput | departmentScalarWhereWithAggregatesInput[]
    OR?: departmentScalarWhereWithAggregatesInput[]
    NOT?: departmentScalarWhereWithAggregatesInput | departmentScalarWhereWithAggregatesInput[]
    department_id?: StringWithAggregatesFilter<"department"> | string
    department_name?: StringWithAggregatesFilter<"department"> | string
  }

  export type medical_historyCreateInput = {
    history_id?: string
    history_name: string
    description: string
    disease?: diseaseCreateNestedManyWithoutHistoryInput
    patient: patientCreateNestedOneWithoutHistoryInput
  }

  export type medical_historyUncheckedCreateInput = {
    history_id?: string
    history_name: string
    description: string
    patientId: string
    disease?: diseaseUncheckedCreateNestedManyWithoutHistoryInput
  }

  export type medical_historyUpdateInput = {
    history_id?: StringFieldUpdateOperationsInput | string
    history_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    disease?: diseaseUpdateManyWithoutHistoryNestedInput
    patient?: patientUpdateOneRequiredWithoutHistoryNestedInput
  }

  export type medical_historyUncheckedUpdateInput = {
    history_id?: StringFieldUpdateOperationsInput | string
    history_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    disease?: diseaseUncheckedUpdateManyWithoutHistoryNestedInput
  }

  export type medical_historyCreateManyInput = {
    history_id?: string
    history_name: string
    description: string
    patientId: string
  }

  export type medical_historyUpdateManyMutationInput = {
    history_id?: StringFieldUpdateOperationsInput | string
    history_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type medical_historyUncheckedUpdateManyInput = {
    history_id?: StringFieldUpdateOperationsInput | string
    history_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
  }

  export type diseaseCreateInput = {
    disease_id?: string
    disease_name: string
    history: medical_historyCreateNestedOneWithoutDiseaseInput
  }

  export type diseaseUncheckedCreateInput = {
    disease_id?: string
    disease_name: string
    history_id: string
  }

  export type diseaseUpdateInput = {
    disease_id?: StringFieldUpdateOperationsInput | string
    disease_name?: StringFieldUpdateOperationsInput | string
    history?: medical_historyUpdateOneRequiredWithoutDiseaseNestedInput
  }

  export type diseaseUncheckedUpdateInput = {
    disease_id?: StringFieldUpdateOperationsInput | string
    disease_name?: StringFieldUpdateOperationsInput | string
    history_id?: StringFieldUpdateOperationsInput | string
  }

  export type diseaseCreateManyInput = {
    disease_id?: string
    disease_name: string
    history_id: string
  }

  export type diseaseUpdateManyMutationInput = {
    disease_id?: StringFieldUpdateOperationsInput | string
    disease_name?: StringFieldUpdateOperationsInput | string
  }

  export type diseaseUncheckedUpdateManyInput = {
    disease_id?: StringFieldUpdateOperationsInput | string
    disease_name?: StringFieldUpdateOperationsInput | string
    history_id?: StringFieldUpdateOperationsInput | string
  }

  export type measurementCreateInput = {
    measurement_id?: string
    name: string
    owner_id: string
    measaurement_type: $Enums.mesaurement_types
    measurement_value: number
    measaurement_unit: string
    measurement_on: Date | string
    created_at?: Date | string
  }

  export type measurementUncheckedCreateInput = {
    measurement_id?: string
    name: string
    owner_id: string
    measaurement_type: $Enums.mesaurement_types
    measurement_value: number
    measaurement_unit: string
    measurement_on: Date | string
    created_at?: Date | string
  }

  export type measurementUpdateInput = {
    measurement_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    owner_id?: StringFieldUpdateOperationsInput | string
    measaurement_type?: Enummesaurement_typesFieldUpdateOperationsInput | $Enums.mesaurement_types
    measurement_value?: FloatFieldUpdateOperationsInput | number
    measaurement_unit?: StringFieldUpdateOperationsInput | string
    measurement_on?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type measurementUncheckedUpdateInput = {
    measurement_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    owner_id?: StringFieldUpdateOperationsInput | string
    measaurement_type?: Enummesaurement_typesFieldUpdateOperationsInput | $Enums.mesaurement_types
    measurement_value?: FloatFieldUpdateOperationsInput | number
    measaurement_unit?: StringFieldUpdateOperationsInput | string
    measurement_on?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type measurementCreateManyInput = {
    measurement_id?: string
    name: string
    owner_id: string
    measaurement_type: $Enums.mesaurement_types
    measurement_value: number
    measaurement_unit: string
    measurement_on: Date | string
    created_at?: Date | string
  }

  export type measurementUpdateManyMutationInput = {
    measurement_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    owner_id?: StringFieldUpdateOperationsInput | string
    measaurement_type?: Enummesaurement_typesFieldUpdateOperationsInput | $Enums.mesaurement_types
    measurement_value?: FloatFieldUpdateOperationsInput | number
    measaurement_unit?: StringFieldUpdateOperationsInput | string
    measurement_on?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type measurementUncheckedUpdateManyInput = {
    measurement_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    owner_id?: StringFieldUpdateOperationsInput | string
    measaurement_type?: Enummesaurement_typesFieldUpdateOperationsInput | $Enums.mesaurement_types
    measurement_value?: FloatFieldUpdateOperationsInput | number
    measaurement_unit?: StringFieldUpdateOperationsInput | string
    measurement_on?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type prescribed_medicationCreateInput = {
    status: $Enums.status
    frequency: string
    start_date: Date | string
    end_date: Date | string
    medication: medicationCreateNestedOneWithoutPrescribedInput
    patient: patientCreateNestedOneWithoutMedicationsInput
    prescribing_physician: doctorCreateNestedOneWithoutPrescribed_medicationsInput
  }

  export type prescribed_medicationUncheckedCreateInput = {
    medication_id: string
    patient_id: string
    status: $Enums.status
    frequency: string
    doctor_id: string
    start_date: Date | string
    end_date: Date | string
  }

  export type prescribed_medicationUpdateInput = {
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    frequency?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    medication?: medicationUpdateOneRequiredWithoutPrescribedNestedInput
    patient?: patientUpdateOneRequiredWithoutMedicationsNestedInput
    prescribing_physician?: doctorUpdateOneRequiredWithoutPrescribed_medicationsNestedInput
  }

  export type prescribed_medicationUncheckedUpdateInput = {
    medication_id?: StringFieldUpdateOperationsInput | string
    patient_id?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    frequency?: StringFieldUpdateOperationsInput | string
    doctor_id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type prescribed_medicationCreateManyInput = {
    medication_id: string
    patient_id: string
    status: $Enums.status
    frequency: string
    doctor_id: string
    start_date: Date | string
    end_date: Date | string
  }

  export type prescribed_medicationUpdateManyMutationInput = {
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    frequency?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type prescribed_medicationUncheckedUpdateManyInput = {
    medication_id?: StringFieldUpdateOperationsInput | string
    patient_id?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    frequency?: StringFieldUpdateOperationsInput | string
    doctor_id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type medicationCreateInput = {
    medication_id?: string
    medication_name: string
    prescribed?: prescribed_medicationCreateNestedManyWithoutMedicationInput
  }

  export type medicationUncheckedCreateInput = {
    medication_id?: string
    medication_name: string
    prescribed?: prescribed_medicationUncheckedCreateNestedManyWithoutMedicationInput
  }

  export type medicationUpdateInput = {
    medication_id?: StringFieldUpdateOperationsInput | string
    medication_name?: StringFieldUpdateOperationsInput | string
    prescribed?: prescribed_medicationUpdateManyWithoutMedicationNestedInput
  }

  export type medicationUncheckedUpdateInput = {
    medication_id?: StringFieldUpdateOperationsInput | string
    medication_name?: StringFieldUpdateOperationsInput | string
    prescribed?: prescribed_medicationUncheckedUpdateManyWithoutMedicationNestedInput
  }

  export type medicationCreateManyInput = {
    medication_id?: string
    medication_name: string
  }

  export type medicationUpdateManyMutationInput = {
    medication_id?: StringFieldUpdateOperationsInput | string
    medication_name?: StringFieldUpdateOperationsInput | string
  }

  export type medicationUncheckedUpdateManyInput = {
    medication_id?: StringFieldUpdateOperationsInput | string
    medication_name?: StringFieldUpdateOperationsInput | string
  }

  export type patientCreateInput = {
    id?: string
    legal_id: string
    dob: Date | string
    sex: $Enums.gender
    username: string
    password: string
    email: string
    phone_number: string
    history?: medical_historyCreateNestedOneWithoutPatientInput
    doctors?: doctorCreateNestedManyWithoutPatientsInput
    medications?: prescribed_medicationCreateNestedManyWithoutPatientInput
  }

  export type patientUncheckedCreateInput = {
    id?: string
    legal_id: string
    dob: Date | string
    sex: $Enums.gender
    username: string
    password: string
    email: string
    phone_number: string
    history?: medical_historyUncheckedCreateNestedOneWithoutPatientInput
    doctors?: doctorUncheckedCreateNestedManyWithoutPatientsInput
    medications?: prescribed_medicationUncheckedCreateNestedManyWithoutPatientInput
  }

  export type patientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    legal_id?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    sex?: EnumgenderFieldUpdateOperationsInput | $Enums.gender
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    history?: medical_historyUpdateOneWithoutPatientNestedInput
    doctors?: doctorUpdateManyWithoutPatientsNestedInput
    medications?: prescribed_medicationUpdateManyWithoutPatientNestedInput
  }

  export type patientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    legal_id?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    sex?: EnumgenderFieldUpdateOperationsInput | $Enums.gender
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    history?: medical_historyUncheckedUpdateOneWithoutPatientNestedInput
    doctors?: doctorUncheckedUpdateManyWithoutPatientsNestedInput
    medications?: prescribed_medicationUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type patientCreateManyInput = {
    id?: string
    legal_id: string
    dob: Date | string
    sex: $Enums.gender
    username: string
    password: string
    email: string
    phone_number: string
  }

  export type patientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    legal_id?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    sex?: EnumgenderFieldUpdateOperationsInput | $Enums.gender
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
  }

  export type patientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    legal_id?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    sex?: EnumgenderFieldUpdateOperationsInput | $Enums.gender
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
  }

  export type doctorCreateInput = {
    id?: string
    department: departmentCreateNestedOneWithoutDoctorsInput
    patients?: patientCreateNestedManyWithoutDoctorsInput
    prescribed_medications?: prescribed_medicationCreateNestedManyWithoutPrescribing_physicianInput
  }

  export type doctorUncheckedCreateInput = {
    id?: string
    department_id: string
    patients?: patientUncheckedCreateNestedManyWithoutDoctorsInput
    prescribed_medications?: prescribed_medicationUncheckedCreateNestedManyWithoutPrescribing_physicianInput
  }

  export type doctorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    department?: departmentUpdateOneRequiredWithoutDoctorsNestedInput
    patients?: patientUpdateManyWithoutDoctorsNestedInput
    prescribed_medications?: prescribed_medicationUpdateManyWithoutPrescribing_physicianNestedInput
  }

  export type doctorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    department_id?: StringFieldUpdateOperationsInput | string
    patients?: patientUncheckedUpdateManyWithoutDoctorsNestedInput
    prescribed_medications?: prescribed_medicationUncheckedUpdateManyWithoutPrescribing_physicianNestedInput
  }

  export type doctorCreateManyInput = {
    id?: string
    department_id: string
  }

  export type doctorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type doctorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    department_id?: StringFieldUpdateOperationsInput | string
  }

  export type departmentCreateInput = {
    department_id?: string
    department_name: string
    doctors?: doctorCreateNestedManyWithoutDepartmentInput
  }

  export type departmentUncheckedCreateInput = {
    department_id?: string
    department_name: string
    doctors?: doctorUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type departmentUpdateInput = {
    department_id?: StringFieldUpdateOperationsInput | string
    department_name?: StringFieldUpdateOperationsInput | string
    doctors?: doctorUpdateManyWithoutDepartmentNestedInput
  }

  export type departmentUncheckedUpdateInput = {
    department_id?: StringFieldUpdateOperationsInput | string
    department_name?: StringFieldUpdateOperationsInput | string
    doctors?: doctorUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type departmentCreateManyInput = {
    department_id?: string
    department_name: string
  }

  export type departmentUpdateManyMutationInput = {
    department_id?: StringFieldUpdateOperationsInput | string
    department_name?: StringFieldUpdateOperationsInput | string
  }

  export type departmentUncheckedUpdateManyInput = {
    department_id?: StringFieldUpdateOperationsInput | string
    department_name?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DiseaseListRelationFilter = {
    every?: diseaseWhereInput
    some?: diseaseWhereInput
    none?: diseaseWhereInput
  }

  export type PatientRelationFilter = {
    is?: patientWhereInput
    isNot?: patientWhereInput
  }

  export type diseaseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type medical_historyCountOrderByAggregateInput = {
    history_id?: SortOrder
    history_name?: SortOrder
    description?: SortOrder
    patientId?: SortOrder
  }

  export type medical_historyMaxOrderByAggregateInput = {
    history_id?: SortOrder
    history_name?: SortOrder
    description?: SortOrder
    patientId?: SortOrder
  }

  export type medical_historyMinOrderByAggregateInput = {
    history_id?: SortOrder
    history_name?: SortOrder
    description?: SortOrder
    patientId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type Medical_historyRelationFilter = {
    is?: medical_historyWhereInput
    isNot?: medical_historyWhereInput
  }

  export type diseaseCountOrderByAggregateInput = {
    disease_id?: SortOrder
    disease_name?: SortOrder
    history_id?: SortOrder
  }

  export type diseaseMaxOrderByAggregateInput = {
    disease_id?: SortOrder
    disease_name?: SortOrder
    history_id?: SortOrder
  }

  export type diseaseMinOrderByAggregateInput = {
    disease_id?: SortOrder
    disease_name?: SortOrder
    history_id?: SortOrder
  }

  export type Enummesaurement_typesFilter<$PrismaModel = never> = {
    equals?: $Enums.mesaurement_types | Enummesaurement_typesFieldRefInput<$PrismaModel>
    in?: $Enums.mesaurement_types[] | ListEnummesaurement_typesFieldRefInput<$PrismaModel>
    notIn?: $Enums.mesaurement_types[] | ListEnummesaurement_typesFieldRefInput<$PrismaModel>
    not?: NestedEnummesaurement_typesFilter<$PrismaModel> | $Enums.mesaurement_types
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type measurementCountOrderByAggregateInput = {
    measurement_id?: SortOrder
    name?: SortOrder
    owner_id?: SortOrder
    measaurement_type?: SortOrder
    measurement_value?: SortOrder
    measaurement_unit?: SortOrder
    measurement_on?: SortOrder
    created_at?: SortOrder
  }

  export type measurementAvgOrderByAggregateInput = {
    measurement_value?: SortOrder
  }

  export type measurementMaxOrderByAggregateInput = {
    measurement_id?: SortOrder
    name?: SortOrder
    owner_id?: SortOrder
    measaurement_type?: SortOrder
    measurement_value?: SortOrder
    measaurement_unit?: SortOrder
    measurement_on?: SortOrder
    created_at?: SortOrder
  }

  export type measurementMinOrderByAggregateInput = {
    measurement_id?: SortOrder
    name?: SortOrder
    owner_id?: SortOrder
    measaurement_type?: SortOrder
    measurement_value?: SortOrder
    measaurement_unit?: SortOrder
    measurement_on?: SortOrder
    created_at?: SortOrder
  }

  export type measurementSumOrderByAggregateInput = {
    measurement_value?: SortOrder
  }

  export type Enummesaurement_typesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.mesaurement_types | Enummesaurement_typesFieldRefInput<$PrismaModel>
    in?: $Enums.mesaurement_types[] | ListEnummesaurement_typesFieldRefInput<$PrismaModel>
    notIn?: $Enums.mesaurement_types[] | ListEnummesaurement_typesFieldRefInput<$PrismaModel>
    not?: NestedEnummesaurement_typesWithAggregatesFilter<$PrismaModel> | $Enums.mesaurement_types
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnummesaurement_typesFilter<$PrismaModel>
    _max?: NestedEnummesaurement_typesFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumstatusFilter<$PrismaModel = never> = {
    equals?: $Enums.status | EnumstatusFieldRefInput<$PrismaModel>
    in?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel>
    not?: NestedEnumstatusFilter<$PrismaModel> | $Enums.status
  }

  export type MedicationRelationFilter = {
    is?: medicationWhereInput
    isNot?: medicationWhereInput
  }

  export type DoctorRelationFilter = {
    is?: doctorWhereInput
    isNot?: doctorWhereInput
  }

  export type prescribed_medicationMedication_idPatient_idStart_dateCompoundUniqueInput = {
    medication_id: string
    patient_id: string
    start_date: Date | string
  }

  export type prescribed_medicationCountOrderByAggregateInput = {
    medication_id?: SortOrder
    patient_id?: SortOrder
    status?: SortOrder
    frequency?: SortOrder
    doctor_id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
  }

  export type prescribed_medicationMaxOrderByAggregateInput = {
    medication_id?: SortOrder
    patient_id?: SortOrder
    status?: SortOrder
    frequency?: SortOrder
    doctor_id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
  }

  export type prescribed_medicationMinOrderByAggregateInput = {
    medication_id?: SortOrder
    patient_id?: SortOrder
    status?: SortOrder
    frequency?: SortOrder
    doctor_id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
  }

  export type EnumstatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.status | EnumstatusFieldRefInput<$PrismaModel>
    in?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel>
    not?: NestedEnumstatusWithAggregatesFilter<$PrismaModel> | $Enums.status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumstatusFilter<$PrismaModel>
    _max?: NestedEnumstatusFilter<$PrismaModel>
  }

  export type Prescribed_medicationListRelationFilter = {
    every?: prescribed_medicationWhereInput
    some?: prescribed_medicationWhereInput
    none?: prescribed_medicationWhereInput
  }

  export type prescribed_medicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type medicationCountOrderByAggregateInput = {
    medication_id?: SortOrder
    medication_name?: SortOrder
  }

  export type medicationMaxOrderByAggregateInput = {
    medication_id?: SortOrder
    medication_name?: SortOrder
  }

  export type medicationMinOrderByAggregateInput = {
    medication_id?: SortOrder
    medication_name?: SortOrder
  }

  export type EnumgenderFilter<$PrismaModel = never> = {
    equals?: $Enums.gender | EnumgenderFieldRefInput<$PrismaModel>
    in?: $Enums.gender[] | ListEnumgenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.gender[] | ListEnumgenderFieldRefInput<$PrismaModel>
    not?: NestedEnumgenderFilter<$PrismaModel> | $Enums.gender
  }

  export type Medical_historyNullableRelationFilter = {
    is?: medical_historyWhereInput | null
    isNot?: medical_historyWhereInput | null
  }

  export type DoctorListRelationFilter = {
    every?: doctorWhereInput
    some?: doctorWhereInput
    none?: doctorWhereInput
  }

  export type doctorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type patientCountOrderByAggregateInput = {
    id?: SortOrder
    legal_id?: SortOrder
    dob?: SortOrder
    sex?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
  }

  export type patientMaxOrderByAggregateInput = {
    id?: SortOrder
    legal_id?: SortOrder
    dob?: SortOrder
    sex?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
  }

  export type patientMinOrderByAggregateInput = {
    id?: SortOrder
    legal_id?: SortOrder
    dob?: SortOrder
    sex?: SortOrder
    username?: SortOrder
    password?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
  }

  export type EnumgenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.gender | EnumgenderFieldRefInput<$PrismaModel>
    in?: $Enums.gender[] | ListEnumgenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.gender[] | ListEnumgenderFieldRefInput<$PrismaModel>
    not?: NestedEnumgenderWithAggregatesFilter<$PrismaModel> | $Enums.gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumgenderFilter<$PrismaModel>
    _max?: NestedEnumgenderFilter<$PrismaModel>
  }

  export type DepartmentRelationFilter = {
    is?: departmentWhereInput
    isNot?: departmentWhereInput
  }

  export type PatientListRelationFilter = {
    every?: patientWhereInput
    some?: patientWhereInput
    none?: patientWhereInput
  }

  export type patientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type doctorCountOrderByAggregateInput = {
    id?: SortOrder
    department_id?: SortOrder
  }

  export type doctorMaxOrderByAggregateInput = {
    id?: SortOrder
    department_id?: SortOrder
  }

  export type doctorMinOrderByAggregateInput = {
    id?: SortOrder
    department_id?: SortOrder
  }

  export type departmentCountOrderByAggregateInput = {
    department_id?: SortOrder
    department_name?: SortOrder
  }

  export type departmentMaxOrderByAggregateInput = {
    department_id?: SortOrder
    department_name?: SortOrder
  }

  export type departmentMinOrderByAggregateInput = {
    department_id?: SortOrder
    department_name?: SortOrder
  }

  export type diseaseCreateNestedManyWithoutHistoryInput = {
    create?: XOR<diseaseCreateWithoutHistoryInput, diseaseUncheckedCreateWithoutHistoryInput> | diseaseCreateWithoutHistoryInput[] | diseaseUncheckedCreateWithoutHistoryInput[]
    connectOrCreate?: diseaseCreateOrConnectWithoutHistoryInput | diseaseCreateOrConnectWithoutHistoryInput[]
    createMany?: diseaseCreateManyHistoryInputEnvelope
    connect?: diseaseWhereUniqueInput | diseaseWhereUniqueInput[]
  }

  export type patientCreateNestedOneWithoutHistoryInput = {
    create?: XOR<patientCreateWithoutHistoryInput, patientUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: patientCreateOrConnectWithoutHistoryInput
    connect?: patientWhereUniqueInput
  }

  export type diseaseUncheckedCreateNestedManyWithoutHistoryInput = {
    create?: XOR<diseaseCreateWithoutHistoryInput, diseaseUncheckedCreateWithoutHistoryInput> | diseaseCreateWithoutHistoryInput[] | diseaseUncheckedCreateWithoutHistoryInput[]
    connectOrCreate?: diseaseCreateOrConnectWithoutHistoryInput | diseaseCreateOrConnectWithoutHistoryInput[]
    createMany?: diseaseCreateManyHistoryInputEnvelope
    connect?: diseaseWhereUniqueInput | diseaseWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type diseaseUpdateManyWithoutHistoryNestedInput = {
    create?: XOR<diseaseCreateWithoutHistoryInput, diseaseUncheckedCreateWithoutHistoryInput> | diseaseCreateWithoutHistoryInput[] | diseaseUncheckedCreateWithoutHistoryInput[]
    connectOrCreate?: diseaseCreateOrConnectWithoutHistoryInput | diseaseCreateOrConnectWithoutHistoryInput[]
    upsert?: diseaseUpsertWithWhereUniqueWithoutHistoryInput | diseaseUpsertWithWhereUniqueWithoutHistoryInput[]
    createMany?: diseaseCreateManyHistoryInputEnvelope
    set?: diseaseWhereUniqueInput | diseaseWhereUniqueInput[]
    disconnect?: diseaseWhereUniqueInput | diseaseWhereUniqueInput[]
    delete?: diseaseWhereUniqueInput | diseaseWhereUniqueInput[]
    connect?: diseaseWhereUniqueInput | diseaseWhereUniqueInput[]
    update?: diseaseUpdateWithWhereUniqueWithoutHistoryInput | diseaseUpdateWithWhereUniqueWithoutHistoryInput[]
    updateMany?: diseaseUpdateManyWithWhereWithoutHistoryInput | diseaseUpdateManyWithWhereWithoutHistoryInput[]
    deleteMany?: diseaseScalarWhereInput | diseaseScalarWhereInput[]
  }

  export type patientUpdateOneRequiredWithoutHistoryNestedInput = {
    create?: XOR<patientCreateWithoutHistoryInput, patientUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: patientCreateOrConnectWithoutHistoryInput
    upsert?: patientUpsertWithoutHistoryInput
    connect?: patientWhereUniqueInput
    update?: XOR<XOR<patientUpdateToOneWithWhereWithoutHistoryInput, patientUpdateWithoutHistoryInput>, patientUncheckedUpdateWithoutHistoryInput>
  }

  export type diseaseUncheckedUpdateManyWithoutHistoryNestedInput = {
    create?: XOR<diseaseCreateWithoutHistoryInput, diseaseUncheckedCreateWithoutHistoryInput> | diseaseCreateWithoutHistoryInput[] | diseaseUncheckedCreateWithoutHistoryInput[]
    connectOrCreate?: diseaseCreateOrConnectWithoutHistoryInput | diseaseCreateOrConnectWithoutHistoryInput[]
    upsert?: diseaseUpsertWithWhereUniqueWithoutHistoryInput | diseaseUpsertWithWhereUniqueWithoutHistoryInput[]
    createMany?: diseaseCreateManyHistoryInputEnvelope
    set?: diseaseWhereUniqueInput | diseaseWhereUniqueInput[]
    disconnect?: diseaseWhereUniqueInput | diseaseWhereUniqueInput[]
    delete?: diseaseWhereUniqueInput | diseaseWhereUniqueInput[]
    connect?: diseaseWhereUniqueInput | diseaseWhereUniqueInput[]
    update?: diseaseUpdateWithWhereUniqueWithoutHistoryInput | diseaseUpdateWithWhereUniqueWithoutHistoryInput[]
    updateMany?: diseaseUpdateManyWithWhereWithoutHistoryInput | diseaseUpdateManyWithWhereWithoutHistoryInput[]
    deleteMany?: diseaseScalarWhereInput | diseaseScalarWhereInput[]
  }

  export type medical_historyCreateNestedOneWithoutDiseaseInput = {
    create?: XOR<medical_historyCreateWithoutDiseaseInput, medical_historyUncheckedCreateWithoutDiseaseInput>
    connectOrCreate?: medical_historyCreateOrConnectWithoutDiseaseInput
    connect?: medical_historyWhereUniqueInput
  }

  export type medical_historyUpdateOneRequiredWithoutDiseaseNestedInput = {
    create?: XOR<medical_historyCreateWithoutDiseaseInput, medical_historyUncheckedCreateWithoutDiseaseInput>
    connectOrCreate?: medical_historyCreateOrConnectWithoutDiseaseInput
    upsert?: medical_historyUpsertWithoutDiseaseInput
    connect?: medical_historyWhereUniqueInput
    update?: XOR<XOR<medical_historyUpdateToOneWithWhereWithoutDiseaseInput, medical_historyUpdateWithoutDiseaseInput>, medical_historyUncheckedUpdateWithoutDiseaseInput>
  }

  export type Enummesaurement_typesFieldUpdateOperationsInput = {
    set?: $Enums.mesaurement_types
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type medicationCreateNestedOneWithoutPrescribedInput = {
    create?: XOR<medicationCreateWithoutPrescribedInput, medicationUncheckedCreateWithoutPrescribedInput>
    connectOrCreate?: medicationCreateOrConnectWithoutPrescribedInput
    connect?: medicationWhereUniqueInput
  }

  export type patientCreateNestedOneWithoutMedicationsInput = {
    create?: XOR<patientCreateWithoutMedicationsInput, patientUncheckedCreateWithoutMedicationsInput>
    connectOrCreate?: patientCreateOrConnectWithoutMedicationsInput
    connect?: patientWhereUniqueInput
  }

  export type doctorCreateNestedOneWithoutPrescribed_medicationsInput = {
    create?: XOR<doctorCreateWithoutPrescribed_medicationsInput, doctorUncheckedCreateWithoutPrescribed_medicationsInput>
    connectOrCreate?: doctorCreateOrConnectWithoutPrescribed_medicationsInput
    connect?: doctorWhereUniqueInput
  }

  export type EnumstatusFieldUpdateOperationsInput = {
    set?: $Enums.status
  }

  export type medicationUpdateOneRequiredWithoutPrescribedNestedInput = {
    create?: XOR<medicationCreateWithoutPrescribedInput, medicationUncheckedCreateWithoutPrescribedInput>
    connectOrCreate?: medicationCreateOrConnectWithoutPrescribedInput
    upsert?: medicationUpsertWithoutPrescribedInput
    connect?: medicationWhereUniqueInput
    update?: XOR<XOR<medicationUpdateToOneWithWhereWithoutPrescribedInput, medicationUpdateWithoutPrescribedInput>, medicationUncheckedUpdateWithoutPrescribedInput>
  }

  export type patientUpdateOneRequiredWithoutMedicationsNestedInput = {
    create?: XOR<patientCreateWithoutMedicationsInput, patientUncheckedCreateWithoutMedicationsInput>
    connectOrCreate?: patientCreateOrConnectWithoutMedicationsInput
    upsert?: patientUpsertWithoutMedicationsInput
    connect?: patientWhereUniqueInput
    update?: XOR<XOR<patientUpdateToOneWithWhereWithoutMedicationsInput, patientUpdateWithoutMedicationsInput>, patientUncheckedUpdateWithoutMedicationsInput>
  }

  export type doctorUpdateOneRequiredWithoutPrescribed_medicationsNestedInput = {
    create?: XOR<doctorCreateWithoutPrescribed_medicationsInput, doctorUncheckedCreateWithoutPrescribed_medicationsInput>
    connectOrCreate?: doctorCreateOrConnectWithoutPrescribed_medicationsInput
    upsert?: doctorUpsertWithoutPrescribed_medicationsInput
    connect?: doctorWhereUniqueInput
    update?: XOR<XOR<doctorUpdateToOneWithWhereWithoutPrescribed_medicationsInput, doctorUpdateWithoutPrescribed_medicationsInput>, doctorUncheckedUpdateWithoutPrescribed_medicationsInput>
  }

  export type prescribed_medicationCreateNestedManyWithoutMedicationInput = {
    create?: XOR<prescribed_medicationCreateWithoutMedicationInput, prescribed_medicationUncheckedCreateWithoutMedicationInput> | prescribed_medicationCreateWithoutMedicationInput[] | prescribed_medicationUncheckedCreateWithoutMedicationInput[]
    connectOrCreate?: prescribed_medicationCreateOrConnectWithoutMedicationInput | prescribed_medicationCreateOrConnectWithoutMedicationInput[]
    createMany?: prescribed_medicationCreateManyMedicationInputEnvelope
    connect?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
  }

  export type prescribed_medicationUncheckedCreateNestedManyWithoutMedicationInput = {
    create?: XOR<prescribed_medicationCreateWithoutMedicationInput, prescribed_medicationUncheckedCreateWithoutMedicationInput> | prescribed_medicationCreateWithoutMedicationInput[] | prescribed_medicationUncheckedCreateWithoutMedicationInput[]
    connectOrCreate?: prescribed_medicationCreateOrConnectWithoutMedicationInput | prescribed_medicationCreateOrConnectWithoutMedicationInput[]
    createMany?: prescribed_medicationCreateManyMedicationInputEnvelope
    connect?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
  }

  export type prescribed_medicationUpdateManyWithoutMedicationNestedInput = {
    create?: XOR<prescribed_medicationCreateWithoutMedicationInput, prescribed_medicationUncheckedCreateWithoutMedicationInput> | prescribed_medicationCreateWithoutMedicationInput[] | prescribed_medicationUncheckedCreateWithoutMedicationInput[]
    connectOrCreate?: prescribed_medicationCreateOrConnectWithoutMedicationInput | prescribed_medicationCreateOrConnectWithoutMedicationInput[]
    upsert?: prescribed_medicationUpsertWithWhereUniqueWithoutMedicationInput | prescribed_medicationUpsertWithWhereUniqueWithoutMedicationInput[]
    createMany?: prescribed_medicationCreateManyMedicationInputEnvelope
    set?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
    disconnect?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
    delete?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
    connect?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
    update?: prescribed_medicationUpdateWithWhereUniqueWithoutMedicationInput | prescribed_medicationUpdateWithWhereUniqueWithoutMedicationInput[]
    updateMany?: prescribed_medicationUpdateManyWithWhereWithoutMedicationInput | prescribed_medicationUpdateManyWithWhereWithoutMedicationInput[]
    deleteMany?: prescribed_medicationScalarWhereInput | prescribed_medicationScalarWhereInput[]
  }

  export type prescribed_medicationUncheckedUpdateManyWithoutMedicationNestedInput = {
    create?: XOR<prescribed_medicationCreateWithoutMedicationInput, prescribed_medicationUncheckedCreateWithoutMedicationInput> | prescribed_medicationCreateWithoutMedicationInput[] | prescribed_medicationUncheckedCreateWithoutMedicationInput[]
    connectOrCreate?: prescribed_medicationCreateOrConnectWithoutMedicationInput | prescribed_medicationCreateOrConnectWithoutMedicationInput[]
    upsert?: prescribed_medicationUpsertWithWhereUniqueWithoutMedicationInput | prescribed_medicationUpsertWithWhereUniqueWithoutMedicationInput[]
    createMany?: prescribed_medicationCreateManyMedicationInputEnvelope
    set?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
    disconnect?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
    delete?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
    connect?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
    update?: prescribed_medicationUpdateWithWhereUniqueWithoutMedicationInput | prescribed_medicationUpdateWithWhereUniqueWithoutMedicationInput[]
    updateMany?: prescribed_medicationUpdateManyWithWhereWithoutMedicationInput | prescribed_medicationUpdateManyWithWhereWithoutMedicationInput[]
    deleteMany?: prescribed_medicationScalarWhereInput | prescribed_medicationScalarWhereInput[]
  }

  export type medical_historyCreateNestedOneWithoutPatientInput = {
    create?: XOR<medical_historyCreateWithoutPatientInput, medical_historyUncheckedCreateWithoutPatientInput>
    connectOrCreate?: medical_historyCreateOrConnectWithoutPatientInput
    connect?: medical_historyWhereUniqueInput
  }

  export type doctorCreateNestedManyWithoutPatientsInput = {
    create?: XOR<doctorCreateWithoutPatientsInput, doctorUncheckedCreateWithoutPatientsInput> | doctorCreateWithoutPatientsInput[] | doctorUncheckedCreateWithoutPatientsInput[]
    connectOrCreate?: doctorCreateOrConnectWithoutPatientsInput | doctorCreateOrConnectWithoutPatientsInput[]
    connect?: doctorWhereUniqueInput | doctorWhereUniqueInput[]
  }

  export type prescribed_medicationCreateNestedManyWithoutPatientInput = {
    create?: XOR<prescribed_medicationCreateWithoutPatientInput, prescribed_medicationUncheckedCreateWithoutPatientInput> | prescribed_medicationCreateWithoutPatientInput[] | prescribed_medicationUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: prescribed_medicationCreateOrConnectWithoutPatientInput | prescribed_medicationCreateOrConnectWithoutPatientInput[]
    createMany?: prescribed_medicationCreateManyPatientInputEnvelope
    connect?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
  }

  export type medical_historyUncheckedCreateNestedOneWithoutPatientInput = {
    create?: XOR<medical_historyCreateWithoutPatientInput, medical_historyUncheckedCreateWithoutPatientInput>
    connectOrCreate?: medical_historyCreateOrConnectWithoutPatientInput
    connect?: medical_historyWhereUniqueInput
  }

  export type doctorUncheckedCreateNestedManyWithoutPatientsInput = {
    create?: XOR<doctorCreateWithoutPatientsInput, doctorUncheckedCreateWithoutPatientsInput> | doctorCreateWithoutPatientsInput[] | doctorUncheckedCreateWithoutPatientsInput[]
    connectOrCreate?: doctorCreateOrConnectWithoutPatientsInput | doctorCreateOrConnectWithoutPatientsInput[]
    connect?: doctorWhereUniqueInput | doctorWhereUniqueInput[]
  }

  export type prescribed_medicationUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<prescribed_medicationCreateWithoutPatientInput, prescribed_medicationUncheckedCreateWithoutPatientInput> | prescribed_medicationCreateWithoutPatientInput[] | prescribed_medicationUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: prescribed_medicationCreateOrConnectWithoutPatientInput | prescribed_medicationCreateOrConnectWithoutPatientInput[]
    createMany?: prescribed_medicationCreateManyPatientInputEnvelope
    connect?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
  }

  export type EnumgenderFieldUpdateOperationsInput = {
    set?: $Enums.gender
  }

  export type medical_historyUpdateOneWithoutPatientNestedInput = {
    create?: XOR<medical_historyCreateWithoutPatientInput, medical_historyUncheckedCreateWithoutPatientInput>
    connectOrCreate?: medical_historyCreateOrConnectWithoutPatientInput
    upsert?: medical_historyUpsertWithoutPatientInput
    disconnect?: medical_historyWhereInput | boolean
    delete?: medical_historyWhereInput | boolean
    connect?: medical_historyWhereUniqueInput
    update?: XOR<XOR<medical_historyUpdateToOneWithWhereWithoutPatientInput, medical_historyUpdateWithoutPatientInput>, medical_historyUncheckedUpdateWithoutPatientInput>
  }

  export type doctorUpdateManyWithoutPatientsNestedInput = {
    create?: XOR<doctorCreateWithoutPatientsInput, doctorUncheckedCreateWithoutPatientsInput> | doctorCreateWithoutPatientsInput[] | doctorUncheckedCreateWithoutPatientsInput[]
    connectOrCreate?: doctorCreateOrConnectWithoutPatientsInput | doctorCreateOrConnectWithoutPatientsInput[]
    upsert?: doctorUpsertWithWhereUniqueWithoutPatientsInput | doctorUpsertWithWhereUniqueWithoutPatientsInput[]
    set?: doctorWhereUniqueInput | doctorWhereUniqueInput[]
    disconnect?: doctorWhereUniqueInput | doctorWhereUniqueInput[]
    delete?: doctorWhereUniqueInput | doctorWhereUniqueInput[]
    connect?: doctorWhereUniqueInput | doctorWhereUniqueInput[]
    update?: doctorUpdateWithWhereUniqueWithoutPatientsInput | doctorUpdateWithWhereUniqueWithoutPatientsInput[]
    updateMany?: doctorUpdateManyWithWhereWithoutPatientsInput | doctorUpdateManyWithWhereWithoutPatientsInput[]
    deleteMany?: doctorScalarWhereInput | doctorScalarWhereInput[]
  }

  export type prescribed_medicationUpdateManyWithoutPatientNestedInput = {
    create?: XOR<prescribed_medicationCreateWithoutPatientInput, prescribed_medicationUncheckedCreateWithoutPatientInput> | prescribed_medicationCreateWithoutPatientInput[] | prescribed_medicationUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: prescribed_medicationCreateOrConnectWithoutPatientInput | prescribed_medicationCreateOrConnectWithoutPatientInput[]
    upsert?: prescribed_medicationUpsertWithWhereUniqueWithoutPatientInput | prescribed_medicationUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: prescribed_medicationCreateManyPatientInputEnvelope
    set?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
    disconnect?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
    delete?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
    connect?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
    update?: prescribed_medicationUpdateWithWhereUniqueWithoutPatientInput | prescribed_medicationUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: prescribed_medicationUpdateManyWithWhereWithoutPatientInput | prescribed_medicationUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: prescribed_medicationScalarWhereInput | prescribed_medicationScalarWhereInput[]
  }

  export type medical_historyUncheckedUpdateOneWithoutPatientNestedInput = {
    create?: XOR<medical_historyCreateWithoutPatientInput, medical_historyUncheckedCreateWithoutPatientInput>
    connectOrCreate?: medical_historyCreateOrConnectWithoutPatientInput
    upsert?: medical_historyUpsertWithoutPatientInput
    disconnect?: medical_historyWhereInput | boolean
    delete?: medical_historyWhereInput | boolean
    connect?: medical_historyWhereUniqueInput
    update?: XOR<XOR<medical_historyUpdateToOneWithWhereWithoutPatientInput, medical_historyUpdateWithoutPatientInput>, medical_historyUncheckedUpdateWithoutPatientInput>
  }

  export type doctorUncheckedUpdateManyWithoutPatientsNestedInput = {
    create?: XOR<doctorCreateWithoutPatientsInput, doctorUncheckedCreateWithoutPatientsInput> | doctorCreateWithoutPatientsInput[] | doctorUncheckedCreateWithoutPatientsInput[]
    connectOrCreate?: doctorCreateOrConnectWithoutPatientsInput | doctorCreateOrConnectWithoutPatientsInput[]
    upsert?: doctorUpsertWithWhereUniqueWithoutPatientsInput | doctorUpsertWithWhereUniqueWithoutPatientsInput[]
    set?: doctorWhereUniqueInput | doctorWhereUniqueInput[]
    disconnect?: doctorWhereUniqueInput | doctorWhereUniqueInput[]
    delete?: doctorWhereUniqueInput | doctorWhereUniqueInput[]
    connect?: doctorWhereUniqueInput | doctorWhereUniqueInput[]
    update?: doctorUpdateWithWhereUniqueWithoutPatientsInput | doctorUpdateWithWhereUniqueWithoutPatientsInput[]
    updateMany?: doctorUpdateManyWithWhereWithoutPatientsInput | doctorUpdateManyWithWhereWithoutPatientsInput[]
    deleteMany?: doctorScalarWhereInput | doctorScalarWhereInput[]
  }

  export type prescribed_medicationUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<prescribed_medicationCreateWithoutPatientInput, prescribed_medicationUncheckedCreateWithoutPatientInput> | prescribed_medicationCreateWithoutPatientInput[] | prescribed_medicationUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: prescribed_medicationCreateOrConnectWithoutPatientInput | prescribed_medicationCreateOrConnectWithoutPatientInput[]
    upsert?: prescribed_medicationUpsertWithWhereUniqueWithoutPatientInput | prescribed_medicationUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: prescribed_medicationCreateManyPatientInputEnvelope
    set?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
    disconnect?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
    delete?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
    connect?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
    update?: prescribed_medicationUpdateWithWhereUniqueWithoutPatientInput | prescribed_medicationUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: prescribed_medicationUpdateManyWithWhereWithoutPatientInput | prescribed_medicationUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: prescribed_medicationScalarWhereInput | prescribed_medicationScalarWhereInput[]
  }

  export type departmentCreateNestedOneWithoutDoctorsInput = {
    create?: XOR<departmentCreateWithoutDoctorsInput, departmentUncheckedCreateWithoutDoctorsInput>
    connectOrCreate?: departmentCreateOrConnectWithoutDoctorsInput
    connect?: departmentWhereUniqueInput
  }

  export type patientCreateNestedManyWithoutDoctorsInput = {
    create?: XOR<patientCreateWithoutDoctorsInput, patientUncheckedCreateWithoutDoctorsInput> | patientCreateWithoutDoctorsInput[] | patientUncheckedCreateWithoutDoctorsInput[]
    connectOrCreate?: patientCreateOrConnectWithoutDoctorsInput | patientCreateOrConnectWithoutDoctorsInput[]
    connect?: patientWhereUniqueInput | patientWhereUniqueInput[]
  }

  export type prescribed_medicationCreateNestedManyWithoutPrescribing_physicianInput = {
    create?: XOR<prescribed_medicationCreateWithoutPrescribing_physicianInput, prescribed_medicationUncheckedCreateWithoutPrescribing_physicianInput> | prescribed_medicationCreateWithoutPrescribing_physicianInput[] | prescribed_medicationUncheckedCreateWithoutPrescribing_physicianInput[]
    connectOrCreate?: prescribed_medicationCreateOrConnectWithoutPrescribing_physicianInput | prescribed_medicationCreateOrConnectWithoutPrescribing_physicianInput[]
    createMany?: prescribed_medicationCreateManyPrescribing_physicianInputEnvelope
    connect?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
  }

  export type patientUncheckedCreateNestedManyWithoutDoctorsInput = {
    create?: XOR<patientCreateWithoutDoctorsInput, patientUncheckedCreateWithoutDoctorsInput> | patientCreateWithoutDoctorsInput[] | patientUncheckedCreateWithoutDoctorsInput[]
    connectOrCreate?: patientCreateOrConnectWithoutDoctorsInput | patientCreateOrConnectWithoutDoctorsInput[]
    connect?: patientWhereUniqueInput | patientWhereUniqueInput[]
  }

  export type prescribed_medicationUncheckedCreateNestedManyWithoutPrescribing_physicianInput = {
    create?: XOR<prescribed_medicationCreateWithoutPrescribing_physicianInput, prescribed_medicationUncheckedCreateWithoutPrescribing_physicianInput> | prescribed_medicationCreateWithoutPrescribing_physicianInput[] | prescribed_medicationUncheckedCreateWithoutPrescribing_physicianInput[]
    connectOrCreate?: prescribed_medicationCreateOrConnectWithoutPrescribing_physicianInput | prescribed_medicationCreateOrConnectWithoutPrescribing_physicianInput[]
    createMany?: prescribed_medicationCreateManyPrescribing_physicianInputEnvelope
    connect?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
  }

  export type departmentUpdateOneRequiredWithoutDoctorsNestedInput = {
    create?: XOR<departmentCreateWithoutDoctorsInput, departmentUncheckedCreateWithoutDoctorsInput>
    connectOrCreate?: departmentCreateOrConnectWithoutDoctorsInput
    upsert?: departmentUpsertWithoutDoctorsInput
    connect?: departmentWhereUniqueInput
    update?: XOR<XOR<departmentUpdateToOneWithWhereWithoutDoctorsInput, departmentUpdateWithoutDoctorsInput>, departmentUncheckedUpdateWithoutDoctorsInput>
  }

  export type patientUpdateManyWithoutDoctorsNestedInput = {
    create?: XOR<patientCreateWithoutDoctorsInput, patientUncheckedCreateWithoutDoctorsInput> | patientCreateWithoutDoctorsInput[] | patientUncheckedCreateWithoutDoctorsInput[]
    connectOrCreate?: patientCreateOrConnectWithoutDoctorsInput | patientCreateOrConnectWithoutDoctorsInput[]
    upsert?: patientUpsertWithWhereUniqueWithoutDoctorsInput | patientUpsertWithWhereUniqueWithoutDoctorsInput[]
    set?: patientWhereUniqueInput | patientWhereUniqueInput[]
    disconnect?: patientWhereUniqueInput | patientWhereUniqueInput[]
    delete?: patientWhereUniqueInput | patientWhereUniqueInput[]
    connect?: patientWhereUniqueInput | patientWhereUniqueInput[]
    update?: patientUpdateWithWhereUniqueWithoutDoctorsInput | patientUpdateWithWhereUniqueWithoutDoctorsInput[]
    updateMany?: patientUpdateManyWithWhereWithoutDoctorsInput | patientUpdateManyWithWhereWithoutDoctorsInput[]
    deleteMany?: patientScalarWhereInput | patientScalarWhereInput[]
  }

  export type prescribed_medicationUpdateManyWithoutPrescribing_physicianNestedInput = {
    create?: XOR<prescribed_medicationCreateWithoutPrescribing_physicianInput, prescribed_medicationUncheckedCreateWithoutPrescribing_physicianInput> | prescribed_medicationCreateWithoutPrescribing_physicianInput[] | prescribed_medicationUncheckedCreateWithoutPrescribing_physicianInput[]
    connectOrCreate?: prescribed_medicationCreateOrConnectWithoutPrescribing_physicianInput | prescribed_medicationCreateOrConnectWithoutPrescribing_physicianInput[]
    upsert?: prescribed_medicationUpsertWithWhereUniqueWithoutPrescribing_physicianInput | prescribed_medicationUpsertWithWhereUniqueWithoutPrescribing_physicianInput[]
    createMany?: prescribed_medicationCreateManyPrescribing_physicianInputEnvelope
    set?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
    disconnect?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
    delete?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
    connect?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
    update?: prescribed_medicationUpdateWithWhereUniqueWithoutPrescribing_physicianInput | prescribed_medicationUpdateWithWhereUniqueWithoutPrescribing_physicianInput[]
    updateMany?: prescribed_medicationUpdateManyWithWhereWithoutPrescribing_physicianInput | prescribed_medicationUpdateManyWithWhereWithoutPrescribing_physicianInput[]
    deleteMany?: prescribed_medicationScalarWhereInput | prescribed_medicationScalarWhereInput[]
  }

  export type patientUncheckedUpdateManyWithoutDoctorsNestedInput = {
    create?: XOR<patientCreateWithoutDoctorsInput, patientUncheckedCreateWithoutDoctorsInput> | patientCreateWithoutDoctorsInput[] | patientUncheckedCreateWithoutDoctorsInput[]
    connectOrCreate?: patientCreateOrConnectWithoutDoctorsInput | patientCreateOrConnectWithoutDoctorsInput[]
    upsert?: patientUpsertWithWhereUniqueWithoutDoctorsInput | patientUpsertWithWhereUniqueWithoutDoctorsInput[]
    set?: patientWhereUniqueInput | patientWhereUniqueInput[]
    disconnect?: patientWhereUniqueInput | patientWhereUniqueInput[]
    delete?: patientWhereUniqueInput | patientWhereUniqueInput[]
    connect?: patientWhereUniqueInput | patientWhereUniqueInput[]
    update?: patientUpdateWithWhereUniqueWithoutDoctorsInput | patientUpdateWithWhereUniqueWithoutDoctorsInput[]
    updateMany?: patientUpdateManyWithWhereWithoutDoctorsInput | patientUpdateManyWithWhereWithoutDoctorsInput[]
    deleteMany?: patientScalarWhereInput | patientScalarWhereInput[]
  }

  export type prescribed_medicationUncheckedUpdateManyWithoutPrescribing_physicianNestedInput = {
    create?: XOR<prescribed_medicationCreateWithoutPrescribing_physicianInput, prescribed_medicationUncheckedCreateWithoutPrescribing_physicianInput> | prescribed_medicationCreateWithoutPrescribing_physicianInput[] | prescribed_medicationUncheckedCreateWithoutPrescribing_physicianInput[]
    connectOrCreate?: prescribed_medicationCreateOrConnectWithoutPrescribing_physicianInput | prescribed_medicationCreateOrConnectWithoutPrescribing_physicianInput[]
    upsert?: prescribed_medicationUpsertWithWhereUniqueWithoutPrescribing_physicianInput | prescribed_medicationUpsertWithWhereUniqueWithoutPrescribing_physicianInput[]
    createMany?: prescribed_medicationCreateManyPrescribing_physicianInputEnvelope
    set?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
    disconnect?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
    delete?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
    connect?: prescribed_medicationWhereUniqueInput | prescribed_medicationWhereUniqueInput[]
    update?: prescribed_medicationUpdateWithWhereUniqueWithoutPrescribing_physicianInput | prescribed_medicationUpdateWithWhereUniqueWithoutPrescribing_physicianInput[]
    updateMany?: prescribed_medicationUpdateManyWithWhereWithoutPrescribing_physicianInput | prescribed_medicationUpdateManyWithWhereWithoutPrescribing_physicianInput[]
    deleteMany?: prescribed_medicationScalarWhereInput | prescribed_medicationScalarWhereInput[]
  }

  export type doctorCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<doctorCreateWithoutDepartmentInput, doctorUncheckedCreateWithoutDepartmentInput> | doctorCreateWithoutDepartmentInput[] | doctorUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: doctorCreateOrConnectWithoutDepartmentInput | doctorCreateOrConnectWithoutDepartmentInput[]
    createMany?: doctorCreateManyDepartmentInputEnvelope
    connect?: doctorWhereUniqueInput | doctorWhereUniqueInput[]
  }

  export type doctorUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<doctorCreateWithoutDepartmentInput, doctorUncheckedCreateWithoutDepartmentInput> | doctorCreateWithoutDepartmentInput[] | doctorUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: doctorCreateOrConnectWithoutDepartmentInput | doctorCreateOrConnectWithoutDepartmentInput[]
    createMany?: doctorCreateManyDepartmentInputEnvelope
    connect?: doctorWhereUniqueInput | doctorWhereUniqueInput[]
  }

  export type doctorUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<doctorCreateWithoutDepartmentInput, doctorUncheckedCreateWithoutDepartmentInput> | doctorCreateWithoutDepartmentInput[] | doctorUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: doctorCreateOrConnectWithoutDepartmentInput | doctorCreateOrConnectWithoutDepartmentInput[]
    upsert?: doctorUpsertWithWhereUniqueWithoutDepartmentInput | doctorUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: doctorCreateManyDepartmentInputEnvelope
    set?: doctorWhereUniqueInput | doctorWhereUniqueInput[]
    disconnect?: doctorWhereUniqueInput | doctorWhereUniqueInput[]
    delete?: doctorWhereUniqueInput | doctorWhereUniqueInput[]
    connect?: doctorWhereUniqueInput | doctorWhereUniqueInput[]
    update?: doctorUpdateWithWhereUniqueWithoutDepartmentInput | doctorUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: doctorUpdateManyWithWhereWithoutDepartmentInput | doctorUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: doctorScalarWhereInput | doctorScalarWhereInput[]
  }

  export type doctorUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<doctorCreateWithoutDepartmentInput, doctorUncheckedCreateWithoutDepartmentInput> | doctorCreateWithoutDepartmentInput[] | doctorUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: doctorCreateOrConnectWithoutDepartmentInput | doctorCreateOrConnectWithoutDepartmentInput[]
    upsert?: doctorUpsertWithWhereUniqueWithoutDepartmentInput | doctorUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: doctorCreateManyDepartmentInputEnvelope
    set?: doctorWhereUniqueInput | doctorWhereUniqueInput[]
    disconnect?: doctorWhereUniqueInput | doctorWhereUniqueInput[]
    delete?: doctorWhereUniqueInput | doctorWhereUniqueInput[]
    connect?: doctorWhereUniqueInput | doctorWhereUniqueInput[]
    update?: doctorUpdateWithWhereUniqueWithoutDepartmentInput | doctorUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: doctorUpdateManyWithWhereWithoutDepartmentInput | doctorUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: doctorScalarWhereInput | doctorScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnummesaurement_typesFilter<$PrismaModel = never> = {
    equals?: $Enums.mesaurement_types | Enummesaurement_typesFieldRefInput<$PrismaModel>
    in?: $Enums.mesaurement_types[] | ListEnummesaurement_typesFieldRefInput<$PrismaModel>
    notIn?: $Enums.mesaurement_types[] | ListEnummesaurement_typesFieldRefInput<$PrismaModel>
    not?: NestedEnummesaurement_typesFilter<$PrismaModel> | $Enums.mesaurement_types
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnummesaurement_typesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.mesaurement_types | Enummesaurement_typesFieldRefInput<$PrismaModel>
    in?: $Enums.mesaurement_types[] | ListEnummesaurement_typesFieldRefInput<$PrismaModel>
    notIn?: $Enums.mesaurement_types[] | ListEnummesaurement_typesFieldRefInput<$PrismaModel>
    not?: NestedEnummesaurement_typesWithAggregatesFilter<$PrismaModel> | $Enums.mesaurement_types
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnummesaurement_typesFilter<$PrismaModel>
    _max?: NestedEnummesaurement_typesFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumstatusFilter<$PrismaModel = never> = {
    equals?: $Enums.status | EnumstatusFieldRefInput<$PrismaModel>
    in?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel>
    not?: NestedEnumstatusFilter<$PrismaModel> | $Enums.status
  }

  export type NestedEnumstatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.status | EnumstatusFieldRefInput<$PrismaModel>
    in?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel>
    not?: NestedEnumstatusWithAggregatesFilter<$PrismaModel> | $Enums.status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumstatusFilter<$PrismaModel>
    _max?: NestedEnumstatusFilter<$PrismaModel>
  }

  export type NestedEnumgenderFilter<$PrismaModel = never> = {
    equals?: $Enums.gender | EnumgenderFieldRefInput<$PrismaModel>
    in?: $Enums.gender[] | ListEnumgenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.gender[] | ListEnumgenderFieldRefInput<$PrismaModel>
    not?: NestedEnumgenderFilter<$PrismaModel> | $Enums.gender
  }

  export type NestedEnumgenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.gender | EnumgenderFieldRefInput<$PrismaModel>
    in?: $Enums.gender[] | ListEnumgenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.gender[] | ListEnumgenderFieldRefInput<$PrismaModel>
    not?: NestedEnumgenderWithAggregatesFilter<$PrismaModel> | $Enums.gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumgenderFilter<$PrismaModel>
    _max?: NestedEnumgenderFilter<$PrismaModel>
  }

  export type diseaseCreateWithoutHistoryInput = {
    disease_id?: string
    disease_name: string
  }

  export type diseaseUncheckedCreateWithoutHistoryInput = {
    disease_id?: string
    disease_name: string
  }

  export type diseaseCreateOrConnectWithoutHistoryInput = {
    where: diseaseWhereUniqueInput
    create: XOR<diseaseCreateWithoutHistoryInput, diseaseUncheckedCreateWithoutHistoryInput>
  }

  export type diseaseCreateManyHistoryInputEnvelope = {
    data: diseaseCreateManyHistoryInput | diseaseCreateManyHistoryInput[]
    skipDuplicates?: boolean
  }

  export type patientCreateWithoutHistoryInput = {
    id?: string
    legal_id: string
    dob: Date | string
    sex: $Enums.gender
    username: string
    password: string
    email: string
    phone_number: string
    doctors?: doctorCreateNestedManyWithoutPatientsInput
    medications?: prescribed_medicationCreateNestedManyWithoutPatientInput
  }

  export type patientUncheckedCreateWithoutHistoryInput = {
    id?: string
    legal_id: string
    dob: Date | string
    sex: $Enums.gender
    username: string
    password: string
    email: string
    phone_number: string
    doctors?: doctorUncheckedCreateNestedManyWithoutPatientsInput
    medications?: prescribed_medicationUncheckedCreateNestedManyWithoutPatientInput
  }

  export type patientCreateOrConnectWithoutHistoryInput = {
    where: patientWhereUniqueInput
    create: XOR<patientCreateWithoutHistoryInput, patientUncheckedCreateWithoutHistoryInput>
  }

  export type diseaseUpsertWithWhereUniqueWithoutHistoryInput = {
    where: diseaseWhereUniqueInput
    update: XOR<diseaseUpdateWithoutHistoryInput, diseaseUncheckedUpdateWithoutHistoryInput>
    create: XOR<diseaseCreateWithoutHistoryInput, diseaseUncheckedCreateWithoutHistoryInput>
  }

  export type diseaseUpdateWithWhereUniqueWithoutHistoryInput = {
    where: diseaseWhereUniqueInput
    data: XOR<diseaseUpdateWithoutHistoryInput, diseaseUncheckedUpdateWithoutHistoryInput>
  }

  export type diseaseUpdateManyWithWhereWithoutHistoryInput = {
    where: diseaseScalarWhereInput
    data: XOR<diseaseUpdateManyMutationInput, diseaseUncheckedUpdateManyWithoutHistoryInput>
  }

  export type diseaseScalarWhereInput = {
    AND?: diseaseScalarWhereInput | diseaseScalarWhereInput[]
    OR?: diseaseScalarWhereInput[]
    NOT?: diseaseScalarWhereInput | diseaseScalarWhereInput[]
    disease_id?: StringFilter<"disease"> | string
    disease_name?: StringFilter<"disease"> | string
    history_id?: StringFilter<"disease"> | string
  }

  export type patientUpsertWithoutHistoryInput = {
    update: XOR<patientUpdateWithoutHistoryInput, patientUncheckedUpdateWithoutHistoryInput>
    create: XOR<patientCreateWithoutHistoryInput, patientUncheckedCreateWithoutHistoryInput>
    where?: patientWhereInput
  }

  export type patientUpdateToOneWithWhereWithoutHistoryInput = {
    where?: patientWhereInput
    data: XOR<patientUpdateWithoutHistoryInput, patientUncheckedUpdateWithoutHistoryInput>
  }

  export type patientUpdateWithoutHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    legal_id?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    sex?: EnumgenderFieldUpdateOperationsInput | $Enums.gender
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    doctors?: doctorUpdateManyWithoutPatientsNestedInput
    medications?: prescribed_medicationUpdateManyWithoutPatientNestedInput
  }

  export type patientUncheckedUpdateWithoutHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    legal_id?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    sex?: EnumgenderFieldUpdateOperationsInput | $Enums.gender
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    doctors?: doctorUncheckedUpdateManyWithoutPatientsNestedInput
    medications?: prescribed_medicationUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type medical_historyCreateWithoutDiseaseInput = {
    history_id?: string
    history_name: string
    description: string
    patient: patientCreateNestedOneWithoutHistoryInput
  }

  export type medical_historyUncheckedCreateWithoutDiseaseInput = {
    history_id?: string
    history_name: string
    description: string
    patientId: string
  }

  export type medical_historyCreateOrConnectWithoutDiseaseInput = {
    where: medical_historyWhereUniqueInput
    create: XOR<medical_historyCreateWithoutDiseaseInput, medical_historyUncheckedCreateWithoutDiseaseInput>
  }

  export type medical_historyUpsertWithoutDiseaseInput = {
    update: XOR<medical_historyUpdateWithoutDiseaseInput, medical_historyUncheckedUpdateWithoutDiseaseInput>
    create: XOR<medical_historyCreateWithoutDiseaseInput, medical_historyUncheckedCreateWithoutDiseaseInput>
    where?: medical_historyWhereInput
  }

  export type medical_historyUpdateToOneWithWhereWithoutDiseaseInput = {
    where?: medical_historyWhereInput
    data: XOR<medical_historyUpdateWithoutDiseaseInput, medical_historyUncheckedUpdateWithoutDiseaseInput>
  }

  export type medical_historyUpdateWithoutDiseaseInput = {
    history_id?: StringFieldUpdateOperationsInput | string
    history_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    patient?: patientUpdateOneRequiredWithoutHistoryNestedInput
  }

  export type medical_historyUncheckedUpdateWithoutDiseaseInput = {
    history_id?: StringFieldUpdateOperationsInput | string
    history_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
  }

  export type medicationCreateWithoutPrescribedInput = {
    medication_id?: string
    medication_name: string
  }

  export type medicationUncheckedCreateWithoutPrescribedInput = {
    medication_id?: string
    medication_name: string
  }

  export type medicationCreateOrConnectWithoutPrescribedInput = {
    where: medicationWhereUniqueInput
    create: XOR<medicationCreateWithoutPrescribedInput, medicationUncheckedCreateWithoutPrescribedInput>
  }

  export type patientCreateWithoutMedicationsInput = {
    id?: string
    legal_id: string
    dob: Date | string
    sex: $Enums.gender
    username: string
    password: string
    email: string
    phone_number: string
    history?: medical_historyCreateNestedOneWithoutPatientInput
    doctors?: doctorCreateNestedManyWithoutPatientsInput
  }

  export type patientUncheckedCreateWithoutMedicationsInput = {
    id?: string
    legal_id: string
    dob: Date | string
    sex: $Enums.gender
    username: string
    password: string
    email: string
    phone_number: string
    history?: medical_historyUncheckedCreateNestedOneWithoutPatientInput
    doctors?: doctorUncheckedCreateNestedManyWithoutPatientsInput
  }

  export type patientCreateOrConnectWithoutMedicationsInput = {
    where: patientWhereUniqueInput
    create: XOR<patientCreateWithoutMedicationsInput, patientUncheckedCreateWithoutMedicationsInput>
  }

  export type doctorCreateWithoutPrescribed_medicationsInput = {
    id?: string
    department: departmentCreateNestedOneWithoutDoctorsInput
    patients?: patientCreateNestedManyWithoutDoctorsInput
  }

  export type doctorUncheckedCreateWithoutPrescribed_medicationsInput = {
    id?: string
    department_id: string
    patients?: patientUncheckedCreateNestedManyWithoutDoctorsInput
  }

  export type doctorCreateOrConnectWithoutPrescribed_medicationsInput = {
    where: doctorWhereUniqueInput
    create: XOR<doctorCreateWithoutPrescribed_medicationsInput, doctorUncheckedCreateWithoutPrescribed_medicationsInput>
  }

  export type medicationUpsertWithoutPrescribedInput = {
    update: XOR<medicationUpdateWithoutPrescribedInput, medicationUncheckedUpdateWithoutPrescribedInput>
    create: XOR<medicationCreateWithoutPrescribedInput, medicationUncheckedCreateWithoutPrescribedInput>
    where?: medicationWhereInput
  }

  export type medicationUpdateToOneWithWhereWithoutPrescribedInput = {
    where?: medicationWhereInput
    data: XOR<medicationUpdateWithoutPrescribedInput, medicationUncheckedUpdateWithoutPrescribedInput>
  }

  export type medicationUpdateWithoutPrescribedInput = {
    medication_id?: StringFieldUpdateOperationsInput | string
    medication_name?: StringFieldUpdateOperationsInput | string
  }

  export type medicationUncheckedUpdateWithoutPrescribedInput = {
    medication_id?: StringFieldUpdateOperationsInput | string
    medication_name?: StringFieldUpdateOperationsInput | string
  }

  export type patientUpsertWithoutMedicationsInput = {
    update: XOR<patientUpdateWithoutMedicationsInput, patientUncheckedUpdateWithoutMedicationsInput>
    create: XOR<patientCreateWithoutMedicationsInput, patientUncheckedCreateWithoutMedicationsInput>
    where?: patientWhereInput
  }

  export type patientUpdateToOneWithWhereWithoutMedicationsInput = {
    where?: patientWhereInput
    data: XOR<patientUpdateWithoutMedicationsInput, patientUncheckedUpdateWithoutMedicationsInput>
  }

  export type patientUpdateWithoutMedicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    legal_id?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    sex?: EnumgenderFieldUpdateOperationsInput | $Enums.gender
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    history?: medical_historyUpdateOneWithoutPatientNestedInput
    doctors?: doctorUpdateManyWithoutPatientsNestedInput
  }

  export type patientUncheckedUpdateWithoutMedicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    legal_id?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    sex?: EnumgenderFieldUpdateOperationsInput | $Enums.gender
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    history?: medical_historyUncheckedUpdateOneWithoutPatientNestedInput
    doctors?: doctorUncheckedUpdateManyWithoutPatientsNestedInput
  }

  export type doctorUpsertWithoutPrescribed_medicationsInput = {
    update: XOR<doctorUpdateWithoutPrescribed_medicationsInput, doctorUncheckedUpdateWithoutPrescribed_medicationsInput>
    create: XOR<doctorCreateWithoutPrescribed_medicationsInput, doctorUncheckedCreateWithoutPrescribed_medicationsInput>
    where?: doctorWhereInput
  }

  export type doctorUpdateToOneWithWhereWithoutPrescribed_medicationsInput = {
    where?: doctorWhereInput
    data: XOR<doctorUpdateWithoutPrescribed_medicationsInput, doctorUncheckedUpdateWithoutPrescribed_medicationsInput>
  }

  export type doctorUpdateWithoutPrescribed_medicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    department?: departmentUpdateOneRequiredWithoutDoctorsNestedInput
    patients?: patientUpdateManyWithoutDoctorsNestedInput
  }

  export type doctorUncheckedUpdateWithoutPrescribed_medicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    department_id?: StringFieldUpdateOperationsInput | string
    patients?: patientUncheckedUpdateManyWithoutDoctorsNestedInput
  }

  export type prescribed_medicationCreateWithoutMedicationInput = {
    status: $Enums.status
    frequency: string
    start_date: Date | string
    end_date: Date | string
    patient: patientCreateNestedOneWithoutMedicationsInput
    prescribing_physician: doctorCreateNestedOneWithoutPrescribed_medicationsInput
  }

  export type prescribed_medicationUncheckedCreateWithoutMedicationInput = {
    patient_id: string
    status: $Enums.status
    frequency: string
    doctor_id: string
    start_date: Date | string
    end_date: Date | string
  }

  export type prescribed_medicationCreateOrConnectWithoutMedicationInput = {
    where: prescribed_medicationWhereUniqueInput
    create: XOR<prescribed_medicationCreateWithoutMedicationInput, prescribed_medicationUncheckedCreateWithoutMedicationInput>
  }

  export type prescribed_medicationCreateManyMedicationInputEnvelope = {
    data: prescribed_medicationCreateManyMedicationInput | prescribed_medicationCreateManyMedicationInput[]
    skipDuplicates?: boolean
  }

  export type prescribed_medicationUpsertWithWhereUniqueWithoutMedicationInput = {
    where: prescribed_medicationWhereUniqueInput
    update: XOR<prescribed_medicationUpdateWithoutMedicationInput, prescribed_medicationUncheckedUpdateWithoutMedicationInput>
    create: XOR<prescribed_medicationCreateWithoutMedicationInput, prescribed_medicationUncheckedCreateWithoutMedicationInput>
  }

  export type prescribed_medicationUpdateWithWhereUniqueWithoutMedicationInput = {
    where: prescribed_medicationWhereUniqueInput
    data: XOR<prescribed_medicationUpdateWithoutMedicationInput, prescribed_medicationUncheckedUpdateWithoutMedicationInput>
  }

  export type prescribed_medicationUpdateManyWithWhereWithoutMedicationInput = {
    where: prescribed_medicationScalarWhereInput
    data: XOR<prescribed_medicationUpdateManyMutationInput, prescribed_medicationUncheckedUpdateManyWithoutMedicationInput>
  }

  export type prescribed_medicationScalarWhereInput = {
    AND?: prescribed_medicationScalarWhereInput | prescribed_medicationScalarWhereInput[]
    OR?: prescribed_medicationScalarWhereInput[]
    NOT?: prescribed_medicationScalarWhereInput | prescribed_medicationScalarWhereInput[]
    medication_id?: StringFilter<"prescribed_medication"> | string
    patient_id?: StringFilter<"prescribed_medication"> | string
    status?: EnumstatusFilter<"prescribed_medication"> | $Enums.status
    frequency?: StringFilter<"prescribed_medication"> | string
    doctor_id?: StringFilter<"prescribed_medication"> | string
    start_date?: DateTimeFilter<"prescribed_medication"> | Date | string
    end_date?: DateTimeFilter<"prescribed_medication"> | Date | string
  }

  export type medical_historyCreateWithoutPatientInput = {
    history_id?: string
    history_name: string
    description: string
    disease?: diseaseCreateNestedManyWithoutHistoryInput
  }

  export type medical_historyUncheckedCreateWithoutPatientInput = {
    history_id?: string
    history_name: string
    description: string
    disease?: diseaseUncheckedCreateNestedManyWithoutHistoryInput
  }

  export type medical_historyCreateOrConnectWithoutPatientInput = {
    where: medical_historyWhereUniqueInput
    create: XOR<medical_historyCreateWithoutPatientInput, medical_historyUncheckedCreateWithoutPatientInput>
  }

  export type doctorCreateWithoutPatientsInput = {
    id?: string
    department: departmentCreateNestedOneWithoutDoctorsInput
    prescribed_medications?: prescribed_medicationCreateNestedManyWithoutPrescribing_physicianInput
  }

  export type doctorUncheckedCreateWithoutPatientsInput = {
    id?: string
    department_id: string
    prescribed_medications?: prescribed_medicationUncheckedCreateNestedManyWithoutPrescribing_physicianInput
  }

  export type doctorCreateOrConnectWithoutPatientsInput = {
    where: doctorWhereUniqueInput
    create: XOR<doctorCreateWithoutPatientsInput, doctorUncheckedCreateWithoutPatientsInput>
  }

  export type prescribed_medicationCreateWithoutPatientInput = {
    status: $Enums.status
    frequency: string
    start_date: Date | string
    end_date: Date | string
    medication: medicationCreateNestedOneWithoutPrescribedInput
    prescribing_physician: doctorCreateNestedOneWithoutPrescribed_medicationsInput
  }

  export type prescribed_medicationUncheckedCreateWithoutPatientInput = {
    medication_id: string
    status: $Enums.status
    frequency: string
    doctor_id: string
    start_date: Date | string
    end_date: Date | string
  }

  export type prescribed_medicationCreateOrConnectWithoutPatientInput = {
    where: prescribed_medicationWhereUniqueInput
    create: XOR<prescribed_medicationCreateWithoutPatientInput, prescribed_medicationUncheckedCreateWithoutPatientInput>
  }

  export type prescribed_medicationCreateManyPatientInputEnvelope = {
    data: prescribed_medicationCreateManyPatientInput | prescribed_medicationCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type medical_historyUpsertWithoutPatientInput = {
    update: XOR<medical_historyUpdateWithoutPatientInput, medical_historyUncheckedUpdateWithoutPatientInput>
    create: XOR<medical_historyCreateWithoutPatientInput, medical_historyUncheckedCreateWithoutPatientInput>
    where?: medical_historyWhereInput
  }

  export type medical_historyUpdateToOneWithWhereWithoutPatientInput = {
    where?: medical_historyWhereInput
    data: XOR<medical_historyUpdateWithoutPatientInput, medical_historyUncheckedUpdateWithoutPatientInput>
  }

  export type medical_historyUpdateWithoutPatientInput = {
    history_id?: StringFieldUpdateOperationsInput | string
    history_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    disease?: diseaseUpdateManyWithoutHistoryNestedInput
  }

  export type medical_historyUncheckedUpdateWithoutPatientInput = {
    history_id?: StringFieldUpdateOperationsInput | string
    history_name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    disease?: diseaseUncheckedUpdateManyWithoutHistoryNestedInput
  }

  export type doctorUpsertWithWhereUniqueWithoutPatientsInput = {
    where: doctorWhereUniqueInput
    update: XOR<doctorUpdateWithoutPatientsInput, doctorUncheckedUpdateWithoutPatientsInput>
    create: XOR<doctorCreateWithoutPatientsInput, doctorUncheckedCreateWithoutPatientsInput>
  }

  export type doctorUpdateWithWhereUniqueWithoutPatientsInput = {
    where: doctorWhereUniqueInput
    data: XOR<doctorUpdateWithoutPatientsInput, doctorUncheckedUpdateWithoutPatientsInput>
  }

  export type doctorUpdateManyWithWhereWithoutPatientsInput = {
    where: doctorScalarWhereInput
    data: XOR<doctorUpdateManyMutationInput, doctorUncheckedUpdateManyWithoutPatientsInput>
  }

  export type doctorScalarWhereInput = {
    AND?: doctorScalarWhereInput | doctorScalarWhereInput[]
    OR?: doctorScalarWhereInput[]
    NOT?: doctorScalarWhereInput | doctorScalarWhereInput[]
    id?: StringFilter<"doctor"> | string
    department_id?: StringFilter<"doctor"> | string
  }

  export type prescribed_medicationUpsertWithWhereUniqueWithoutPatientInput = {
    where: prescribed_medicationWhereUniqueInput
    update: XOR<prescribed_medicationUpdateWithoutPatientInput, prescribed_medicationUncheckedUpdateWithoutPatientInput>
    create: XOR<prescribed_medicationCreateWithoutPatientInput, prescribed_medicationUncheckedCreateWithoutPatientInput>
  }

  export type prescribed_medicationUpdateWithWhereUniqueWithoutPatientInput = {
    where: prescribed_medicationWhereUniqueInput
    data: XOR<prescribed_medicationUpdateWithoutPatientInput, prescribed_medicationUncheckedUpdateWithoutPatientInput>
  }

  export type prescribed_medicationUpdateManyWithWhereWithoutPatientInput = {
    where: prescribed_medicationScalarWhereInput
    data: XOR<prescribed_medicationUpdateManyMutationInput, prescribed_medicationUncheckedUpdateManyWithoutPatientInput>
  }

  export type departmentCreateWithoutDoctorsInput = {
    department_id?: string
    department_name: string
  }

  export type departmentUncheckedCreateWithoutDoctorsInput = {
    department_id?: string
    department_name: string
  }

  export type departmentCreateOrConnectWithoutDoctorsInput = {
    where: departmentWhereUniqueInput
    create: XOR<departmentCreateWithoutDoctorsInput, departmentUncheckedCreateWithoutDoctorsInput>
  }

  export type patientCreateWithoutDoctorsInput = {
    id?: string
    legal_id: string
    dob: Date | string
    sex: $Enums.gender
    username: string
    password: string
    email: string
    phone_number: string
    history?: medical_historyCreateNestedOneWithoutPatientInput
    medications?: prescribed_medicationCreateNestedManyWithoutPatientInput
  }

  export type patientUncheckedCreateWithoutDoctorsInput = {
    id?: string
    legal_id: string
    dob: Date | string
    sex: $Enums.gender
    username: string
    password: string
    email: string
    phone_number: string
    history?: medical_historyUncheckedCreateNestedOneWithoutPatientInput
    medications?: prescribed_medicationUncheckedCreateNestedManyWithoutPatientInput
  }

  export type patientCreateOrConnectWithoutDoctorsInput = {
    where: patientWhereUniqueInput
    create: XOR<patientCreateWithoutDoctorsInput, patientUncheckedCreateWithoutDoctorsInput>
  }

  export type prescribed_medicationCreateWithoutPrescribing_physicianInput = {
    status: $Enums.status
    frequency: string
    start_date: Date | string
    end_date: Date | string
    medication: medicationCreateNestedOneWithoutPrescribedInput
    patient: patientCreateNestedOneWithoutMedicationsInput
  }

  export type prescribed_medicationUncheckedCreateWithoutPrescribing_physicianInput = {
    medication_id: string
    patient_id: string
    status: $Enums.status
    frequency: string
    start_date: Date | string
    end_date: Date | string
  }

  export type prescribed_medicationCreateOrConnectWithoutPrescribing_physicianInput = {
    where: prescribed_medicationWhereUniqueInput
    create: XOR<prescribed_medicationCreateWithoutPrescribing_physicianInput, prescribed_medicationUncheckedCreateWithoutPrescribing_physicianInput>
  }

  export type prescribed_medicationCreateManyPrescribing_physicianInputEnvelope = {
    data: prescribed_medicationCreateManyPrescribing_physicianInput | prescribed_medicationCreateManyPrescribing_physicianInput[]
    skipDuplicates?: boolean
  }

  export type departmentUpsertWithoutDoctorsInput = {
    update: XOR<departmentUpdateWithoutDoctorsInput, departmentUncheckedUpdateWithoutDoctorsInput>
    create: XOR<departmentCreateWithoutDoctorsInput, departmentUncheckedCreateWithoutDoctorsInput>
    where?: departmentWhereInput
  }

  export type departmentUpdateToOneWithWhereWithoutDoctorsInput = {
    where?: departmentWhereInput
    data: XOR<departmentUpdateWithoutDoctorsInput, departmentUncheckedUpdateWithoutDoctorsInput>
  }

  export type departmentUpdateWithoutDoctorsInput = {
    department_id?: StringFieldUpdateOperationsInput | string
    department_name?: StringFieldUpdateOperationsInput | string
  }

  export type departmentUncheckedUpdateWithoutDoctorsInput = {
    department_id?: StringFieldUpdateOperationsInput | string
    department_name?: StringFieldUpdateOperationsInput | string
  }

  export type patientUpsertWithWhereUniqueWithoutDoctorsInput = {
    where: patientWhereUniqueInput
    update: XOR<patientUpdateWithoutDoctorsInput, patientUncheckedUpdateWithoutDoctorsInput>
    create: XOR<patientCreateWithoutDoctorsInput, patientUncheckedCreateWithoutDoctorsInput>
  }

  export type patientUpdateWithWhereUniqueWithoutDoctorsInput = {
    where: patientWhereUniqueInput
    data: XOR<patientUpdateWithoutDoctorsInput, patientUncheckedUpdateWithoutDoctorsInput>
  }

  export type patientUpdateManyWithWhereWithoutDoctorsInput = {
    where: patientScalarWhereInput
    data: XOR<patientUpdateManyMutationInput, patientUncheckedUpdateManyWithoutDoctorsInput>
  }

  export type patientScalarWhereInput = {
    AND?: patientScalarWhereInput | patientScalarWhereInput[]
    OR?: patientScalarWhereInput[]
    NOT?: patientScalarWhereInput | patientScalarWhereInput[]
    id?: StringFilter<"patient"> | string
    legal_id?: StringFilter<"patient"> | string
    dob?: DateTimeFilter<"patient"> | Date | string
    sex?: EnumgenderFilter<"patient"> | $Enums.gender
    username?: StringFilter<"patient"> | string
    password?: StringFilter<"patient"> | string
    email?: StringFilter<"patient"> | string
    phone_number?: StringFilter<"patient"> | string
  }

  export type prescribed_medicationUpsertWithWhereUniqueWithoutPrescribing_physicianInput = {
    where: prescribed_medicationWhereUniqueInput
    update: XOR<prescribed_medicationUpdateWithoutPrescribing_physicianInput, prescribed_medicationUncheckedUpdateWithoutPrescribing_physicianInput>
    create: XOR<prescribed_medicationCreateWithoutPrescribing_physicianInput, prescribed_medicationUncheckedCreateWithoutPrescribing_physicianInput>
  }

  export type prescribed_medicationUpdateWithWhereUniqueWithoutPrescribing_physicianInput = {
    where: prescribed_medicationWhereUniqueInput
    data: XOR<prescribed_medicationUpdateWithoutPrescribing_physicianInput, prescribed_medicationUncheckedUpdateWithoutPrescribing_physicianInput>
  }

  export type prescribed_medicationUpdateManyWithWhereWithoutPrescribing_physicianInput = {
    where: prescribed_medicationScalarWhereInput
    data: XOR<prescribed_medicationUpdateManyMutationInput, prescribed_medicationUncheckedUpdateManyWithoutPrescribing_physicianInput>
  }

  export type doctorCreateWithoutDepartmentInput = {
    id?: string
    patients?: patientCreateNestedManyWithoutDoctorsInput
    prescribed_medications?: prescribed_medicationCreateNestedManyWithoutPrescribing_physicianInput
  }

  export type doctorUncheckedCreateWithoutDepartmentInput = {
    id?: string
    patients?: patientUncheckedCreateNestedManyWithoutDoctorsInput
    prescribed_medications?: prescribed_medicationUncheckedCreateNestedManyWithoutPrescribing_physicianInput
  }

  export type doctorCreateOrConnectWithoutDepartmentInput = {
    where: doctorWhereUniqueInput
    create: XOR<doctorCreateWithoutDepartmentInput, doctorUncheckedCreateWithoutDepartmentInput>
  }

  export type doctorCreateManyDepartmentInputEnvelope = {
    data: doctorCreateManyDepartmentInput | doctorCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type doctorUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: doctorWhereUniqueInput
    update: XOR<doctorUpdateWithoutDepartmentInput, doctorUncheckedUpdateWithoutDepartmentInput>
    create: XOR<doctorCreateWithoutDepartmentInput, doctorUncheckedCreateWithoutDepartmentInput>
  }

  export type doctorUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: doctorWhereUniqueInput
    data: XOR<doctorUpdateWithoutDepartmentInput, doctorUncheckedUpdateWithoutDepartmentInput>
  }

  export type doctorUpdateManyWithWhereWithoutDepartmentInput = {
    where: doctorScalarWhereInput
    data: XOR<doctorUpdateManyMutationInput, doctorUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type diseaseCreateManyHistoryInput = {
    disease_id?: string
    disease_name: string
  }

  export type diseaseUpdateWithoutHistoryInput = {
    disease_id?: StringFieldUpdateOperationsInput | string
    disease_name?: StringFieldUpdateOperationsInput | string
  }

  export type diseaseUncheckedUpdateWithoutHistoryInput = {
    disease_id?: StringFieldUpdateOperationsInput | string
    disease_name?: StringFieldUpdateOperationsInput | string
  }

  export type diseaseUncheckedUpdateManyWithoutHistoryInput = {
    disease_id?: StringFieldUpdateOperationsInput | string
    disease_name?: StringFieldUpdateOperationsInput | string
  }

  export type prescribed_medicationCreateManyMedicationInput = {
    patient_id: string
    status: $Enums.status
    frequency: string
    doctor_id: string
    start_date: Date | string
    end_date: Date | string
  }

  export type prescribed_medicationUpdateWithoutMedicationInput = {
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    frequency?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: patientUpdateOneRequiredWithoutMedicationsNestedInput
    prescribing_physician?: doctorUpdateOneRequiredWithoutPrescribed_medicationsNestedInput
  }

  export type prescribed_medicationUncheckedUpdateWithoutMedicationInput = {
    patient_id?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    frequency?: StringFieldUpdateOperationsInput | string
    doctor_id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type prescribed_medicationUncheckedUpdateManyWithoutMedicationInput = {
    patient_id?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    frequency?: StringFieldUpdateOperationsInput | string
    doctor_id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type prescribed_medicationCreateManyPatientInput = {
    medication_id: string
    status: $Enums.status
    frequency: string
    doctor_id: string
    start_date: Date | string
    end_date: Date | string
  }

  export type doctorUpdateWithoutPatientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    department?: departmentUpdateOneRequiredWithoutDoctorsNestedInput
    prescribed_medications?: prescribed_medicationUpdateManyWithoutPrescribing_physicianNestedInput
  }

  export type doctorUncheckedUpdateWithoutPatientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    department_id?: StringFieldUpdateOperationsInput | string
    prescribed_medications?: prescribed_medicationUncheckedUpdateManyWithoutPrescribing_physicianNestedInput
  }

  export type doctorUncheckedUpdateManyWithoutPatientsInput = {
    id?: StringFieldUpdateOperationsInput | string
    department_id?: StringFieldUpdateOperationsInput | string
  }

  export type prescribed_medicationUpdateWithoutPatientInput = {
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    frequency?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    medication?: medicationUpdateOneRequiredWithoutPrescribedNestedInput
    prescribing_physician?: doctorUpdateOneRequiredWithoutPrescribed_medicationsNestedInput
  }

  export type prescribed_medicationUncheckedUpdateWithoutPatientInput = {
    medication_id?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    frequency?: StringFieldUpdateOperationsInput | string
    doctor_id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type prescribed_medicationUncheckedUpdateManyWithoutPatientInput = {
    medication_id?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    frequency?: StringFieldUpdateOperationsInput | string
    doctor_id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type prescribed_medicationCreateManyPrescribing_physicianInput = {
    medication_id: string
    patient_id: string
    status: $Enums.status
    frequency: string
    start_date: Date | string
    end_date: Date | string
  }

  export type patientUpdateWithoutDoctorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    legal_id?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    sex?: EnumgenderFieldUpdateOperationsInput | $Enums.gender
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    history?: medical_historyUpdateOneWithoutPatientNestedInput
    medications?: prescribed_medicationUpdateManyWithoutPatientNestedInput
  }

  export type patientUncheckedUpdateWithoutDoctorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    legal_id?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    sex?: EnumgenderFieldUpdateOperationsInput | $Enums.gender
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    history?: medical_historyUncheckedUpdateOneWithoutPatientNestedInput
    medications?: prescribed_medicationUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type patientUncheckedUpdateManyWithoutDoctorsInput = {
    id?: StringFieldUpdateOperationsInput | string
    legal_id?: StringFieldUpdateOperationsInput | string
    dob?: DateTimeFieldUpdateOperationsInput | Date | string
    sex?: EnumgenderFieldUpdateOperationsInput | $Enums.gender
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
  }

  export type prescribed_medicationUpdateWithoutPrescribing_physicianInput = {
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    frequency?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    medication?: medicationUpdateOneRequiredWithoutPrescribedNestedInput
    patient?: patientUpdateOneRequiredWithoutMedicationsNestedInput
  }

  export type prescribed_medicationUncheckedUpdateWithoutPrescribing_physicianInput = {
    medication_id?: StringFieldUpdateOperationsInput | string
    patient_id?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    frequency?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type prescribed_medicationUncheckedUpdateManyWithoutPrescribing_physicianInput = {
    medication_id?: StringFieldUpdateOperationsInput | string
    patient_id?: StringFieldUpdateOperationsInput | string
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    frequency?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type doctorCreateManyDepartmentInput = {
    id?: string
  }

  export type doctorUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    patients?: patientUpdateManyWithoutDoctorsNestedInput
    prescribed_medications?: prescribed_medicationUpdateManyWithoutPrescribing_physicianNestedInput
  }

  export type doctorUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    patients?: patientUncheckedUpdateManyWithoutDoctorsNestedInput
    prescribed_medications?: prescribed_medicationUncheckedUpdateManyWithoutPrescribing_physicianNestedInput
  }

  export type doctorUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use Medical_historyCountOutputTypeDefaultArgs instead
     */
    export type Medical_historyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Medical_historyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MedicationCountOutputTypeDefaultArgs instead
     */
    export type MedicationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MedicationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientCountOutputTypeDefaultArgs instead
     */
    export type PatientCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PatientCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DoctorCountOutputTypeDefaultArgs instead
     */
    export type DoctorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DoctorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepartmentCountOutputTypeDefaultArgs instead
     */
    export type DepartmentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepartmentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use medical_historyDefaultArgs instead
     */
    export type medical_historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = medical_historyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use diseaseDefaultArgs instead
     */
    export type diseaseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = diseaseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use measurementDefaultArgs instead
     */
    export type measurementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = measurementDefaultArgs<ExtArgs>
    /**
     * @deprecated Use prescribed_medicationDefaultArgs instead
     */
    export type prescribed_medicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = prescribed_medicationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use medicationDefaultArgs instead
     */
    export type medicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = medicationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use patientDefaultArgs instead
     */
    export type patientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = patientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use doctorDefaultArgs instead
     */
    export type doctorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = doctorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use departmentDefaultArgs instead
     */
    export type departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = departmentDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}